{
    "docs": [
        {
            "location": "/",
            "text": "Overview\n\u00b6\n\n\n\n  \n\n    \n\n  \n\n  \n\n    \n What is it \n\n    \n Lorem ipsum is hard to consume and I use it as a last resort. So, I'll fill random text please and you don't even have to read it. Lorem ipsum is hard to consume and I use it as a last resort. So, I'll fill to read it. \n\n    \nThe Flows\n\n  \n\n\n\n\n\n\n  \n\n    \n\n  \n\n  \n\n    \n How it works \n\n    \n I don't know what to type here so let me fill some random text. Lorem ipsum is hard to consume and I use it as a last resort. So, I'll fill random text please and you don't even have to read it. \n\n    \nArchitecture\n\n  \n\n\n\n\n\n\n  \n\n    \n\n  \n\n  \n\n    \n What is it \n\n    \n Lorem ipsum is hard to consume and I use it as a last resort. So, I'll fill random text please and you don't even have to read it. Lorem ipsum is hard to consume and I use it as a last resort. So, I'll fill to read it. \n\n    \nGetting Started\n\n  \n\n\n\n\n\n\n  \n\n    \n What is it \n\n    \n Lorem ipsum is hard to consume and I use it as a last resort. So, I'll fill random text please and you don't even have to read it. Lorem ipsum is hard to consume and I use it as a last resort. So, I'll fill to read it. \n\n  \n\n  \n\n    \n\n  \n\n\n\n\n\n\n  \nAPI docs\n\n  \nJava\n\n  \n.NET\n\n  \nGo\n\n  \nNode.js\n\n  \nPython (2.7)",
            "title": "Overview"
        },
        {
            "location": "/#overview",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/introduction/",
            "text": "The aim of the Worldpay Within SDK is to allow payments within IoT.\n\n\nWorldpay Within orchestrates smart things talking to each other and paying for services. It does this through 4 main services, this is between 'consumer' devices (requesting the service / consuming the service) and 'producer' devices (providing the service / producing the service):\n\n\n\n\nDiscover - UDP broadcast from the 'producer' thing to the 'consumer' thing\n\n\nNegotiate - AT the moment the consumer contacts the producer using HTTPS RESTful web service, get's a menu of prices and selects a price. Wouldn't it be great if there was smart bidding?\n\n\nMake a payment - Online.worldpay.com or Worldpay Total (US or Securnet) are used to make a payment\n\n\nRelease a service - Trusted trigger provides a secure token to the consumer that is used to request the service from the producer.\n\n\n\n\nSDK source code is in the repo (make up of the 'wrapper' which is the API layer), you then need the IOT core component, which you download from releases. This is the RPC-agent - so the IoT core component can be thought of as the engine, or the Go SDK packaged up to work with whatever API (think of the wrapper as the API) in whichever language you prefer.\n\n\nWe talk about wrappers, this is the API code in the preferred language, or the rest of the rocket.\n\n\nThe core of this SDK is written in Go with a native Go interface. Along with the native Go interface is an RPC layer (Apache Thrift) to allow communication through other languages. It is intended that we will develop a number of complementary wrapper libraries for other languages which should include C#.NET, Java, Python at a minimum.\n\n\nHere's a quick introduction for the Atlanta Fintech Hackathon\n\n\nSign up to our slack group, for comms, support and staying connected\n\n\nGetting started guide\n \nGet the SDK\n \nThe Worldpay Within Architecture\n\n\nWhat is Worldpay Within and what does Worldpay within do\n\u00b6\n\n\nWorldpay is an embeddable payments agent, for the Internet of Things (IoT) that can be 'plugged' into your app for a smart device, enabling it to discover services of other devices, pay for those services, and then consume those services. Conversely it also allows your smart device to expose services to consumers, receive payments for those services, and then release services to a consumer using the idea of a 'Trusted Trigger'.\n\n\nIt is all about enabling payments in IoT, and allowing smart devices to communicate with each other and exchange value for services in IoT\n\n\nSo a consumer is a smart device which is looking for services, pays for services and consumes services\n\n\nOn the other hand a producer is a smart device that is able to advertise availability of it's owner services to consumers, then negogiate a payment, take a payment, and release those services to the trusted consumer that made the payment\n\n\n\n\nWhat Worldpay Within Does.\n\n\nThe use case shown in the example above has a smart car looking for parking, and paying a smart parking meter for parking in it's parking bay. The smart car \"wants to park\", so has HCE (Host Card Emulation; card credentials), it acts as a shopper. When trying to make a payment, it will go off to the Worldpay online payments gateway and request tokenised card credentials based on the smart device it is trying to consume services from.\n\n\nThis token is then securely passed to the parking meter. In this case the parking meter is the Producer, or is acting as the merchant, or HTE (Host Terminal Emulation, accepting payment), which then directly communicates with the online Worldlpay gateway to make a 'card on file' or 'eCommerce' type payment authorisation request. With the payment authorised it then releases the purhcased service to the consumer.\n\n\nThe beauty of Worldpay Within is that it enables smart devices to both make payments and receive payments. In this example above the parking meter could then go on to make payments to the electricity companies smart hub which is powering it.\n\n\n\u2192\n\n\nWhat it is\n\u00b6\n\n\nDriven by the \nInternet of Things\n, Worldpay has been keen to demonstrate how you can integrate payments into everyday objects. So, we created Worldpay Within, an embeddable payments agent that can be 'plugged' into your app or a smart device. It then lets you discover other devices and pay for that device\u2019s service.\n\n\nWe\u2019ve got a series of \nopen source\n software development kits (SDKs) that lets you make and accept payments from a range of devices. We\u2019ve got SDKs for \nnode.js\n, \nGo\n, \n.NET\n, \nJava\n and \nPython 2.7 and 3\n. You can download these SDKs, get playing, configure your setup, and recommend changes to our open source libraries.\n\n\nWhy use it\n\u00b6\n\n\nYou might want to use Worldpay Within if you\u2019re a startup company that\u2019s creating technologies relating to the Internet of Things. Or perhaps you\u2019re a hobby developer who likes creating innovative technologies in your spare time.\n\n\nA demonstration\n\u00b6\n\n\n\n\n\nThe Internet of Things\n\u00b6\n\n\nThe Internet of Things (IoT) is an initiative to connect everyday items to the internet. It could be a car which needs to pay for fuel or some repairs, a fridge which needs to order some groceries.\n\n\nIt is estimated\n that there will be 6 billion devices connected to the IoT by the end of 2016 and 20 billion by 2020. Some of these devices will consume services from other devices for which a payment will be required.\n\n\nBy using a set of APIs, \u201cThing\u201d developers will be able to integrate Worldpay Within into their IoT device, enabling the \u201cThing\u201d to make and/or receive payments for services to and from other \u201cThings\u201d.\n\n\nWorldpay Within orchestrates smart things talking to each other and paying for services.\n\n\nHow it works\n\u00b6\n\n\nThere are four simple interactions that takes place with Worldpay Within: \nDiscover\n, \nSelect\n, \nPay\n and \nRelease\n.\n\n\nLet's imagine that a car needs some fuel. It stops by a petrol station and broadcasts that it needs some fuel. The petrol station receives this signal, informs the car of how much fuel costs and what options are available, and once the shopper has agreed the price, then Worldpay will process the payment and inform the petrol station that it can fuel the car.\n\n\n\n\nA demonstration of how to use Worldpay Within in four easy interactions\n\n\n\n\nDiscover - \nThing A (shopper)\n broadcasts to \nThing B (merchant)\n that it requires something.\n\n\nSelect - When \nThing B\n receives \nThing A\u2019s\n broadcast, it tells them the options and the shopper chooses one.\n\n\nPay - \nThing A\n pays.\n\n\nRelease - Worldpay sends \nThing B\n a secure token (a trusted trigger) to release the service to \nThing A.\n\n\n\n\nHackathons\n\u00b6\n\n\nIn 2016, Worldpay hosted the \nPayments & IOT Hackathon\n in which we wanted to take digital payments to the next level. In 2017, we're hosting another Hackathon in Romania, in which we release Worldpay Within.\n\n\nWant to find out more? Head over to the \nHackathons\n page.\n\n\nIt's open source\n\u00b6\n\n\nWorldpay Within is open source, so why not give it a go yourself? You can find the GitHub library \nhere.\n\n\nIt's still an alpha based experiment, but we're actively building new features (and bug fixes) and are concurrently working on evolving the security architecture so we can take real payments.\n\n\nIf you'd like to contribute to the project, head over to the \nIssues page\n to see how you can help. And, of course, we'd love to see what you can come up with, so why not become a contributor?\n\n\nGet the SDKs\n\u00b6\n\n\nWorldpay Within's SDK is written in GoLang and runs on smart devices, including Raspberry Pi. It allows you to make and receive payments within the IoT. We've got wrappers in these languages:\n\n\n\n  \nGo\n\n  \nJava\n\n  \n.NET\n\n  \nPython\n\n  \nNode.js\n\n\n\n\n\nContact us\n\u00b6\n\n\nIf you've got any questions, or if you want to find out more, why not give us a shout at \nInnovation@Worldpay.com\n.",
            "title": "Introduction"
        },
        {
            "location": "/introduction/#what-is-worldpay-within-and-what-does-worldpay-within-do",
            "text": "Worldpay is an embeddable payments agent, for the Internet of Things (IoT) that can be 'plugged' into your app for a smart device, enabling it to discover services of other devices, pay for those services, and then consume those services. Conversely it also allows your smart device to expose services to consumers, receive payments for those services, and then release services to a consumer using the idea of a 'Trusted Trigger'.  It is all about enabling payments in IoT, and allowing smart devices to communicate with each other and exchange value for services in IoT  So a consumer is a smart device which is looking for services, pays for services and consumes services  On the other hand a producer is a smart device that is able to advertise availability of it's owner services to consumers, then negogiate a payment, take a payment, and release those services to the trusted consumer that made the payment   What Worldpay Within Does.  The use case shown in the example above has a smart car looking for parking, and paying a smart parking meter for parking in it's parking bay. The smart car \"wants to park\", so has HCE (Host Card Emulation; card credentials), it acts as a shopper. When trying to make a payment, it will go off to the Worldpay online payments gateway and request tokenised card credentials based on the smart device it is trying to consume services from.  This token is then securely passed to the parking meter. In this case the parking meter is the Producer, or is acting as the merchant, or HTE (Host Terminal Emulation, accepting payment), which then directly communicates with the online Worldlpay gateway to make a 'card on file' or 'eCommerce' type payment authorisation request. With the payment authorised it then releases the purhcased service to the consumer.  The beauty of Worldpay Within is that it enables smart devices to both make payments and receive payments. In this example above the parking meter could then go on to make payments to the electricity companies smart hub which is powering it.  \u2192",
            "title": "What is Worldpay Within and what does Worldpay within do"
        },
        {
            "location": "/introduction/#what-it-is",
            "text": "Driven by the  Internet of Things , Worldpay has been keen to demonstrate how you can integrate payments into everyday objects. So, we created Worldpay Within, an embeddable payments agent that can be 'plugged' into your app or a smart device. It then lets you discover other devices and pay for that device\u2019s service.  We\u2019ve got a series of  open source  software development kits (SDKs) that lets you make and accept payments from a range of devices. We\u2019ve got SDKs for  node.js ,  Go ,  .NET ,  Java  and  Python 2.7 and 3 . You can download these SDKs, get playing, configure your setup, and recommend changes to our open source libraries.",
            "title": "What it is"
        },
        {
            "location": "/introduction/#why-use-it",
            "text": "You might want to use Worldpay Within if you\u2019re a startup company that\u2019s creating technologies relating to the Internet of Things. Or perhaps you\u2019re a hobby developer who likes creating innovative technologies in your spare time.",
            "title": "Why use it"
        },
        {
            "location": "/introduction/#a-demonstration",
            "text": "",
            "title": "A demonstration"
        },
        {
            "location": "/introduction/#the-internet-of-things",
            "text": "The Internet of Things (IoT) is an initiative to connect everyday items to the internet. It could be a car which needs to pay for fuel or some repairs, a fridge which needs to order some groceries.  It is estimated  that there will be 6 billion devices connected to the IoT by the end of 2016 and 20 billion by 2020. Some of these devices will consume services from other devices for which a payment will be required.  By using a set of APIs, \u201cThing\u201d developers will be able to integrate Worldpay Within into their IoT device, enabling the \u201cThing\u201d to make and/or receive payments for services to and from other \u201cThings\u201d.  Worldpay Within orchestrates smart things talking to each other and paying for services.",
            "title": "The Internet of Things"
        },
        {
            "location": "/introduction/#how-it-works",
            "text": "There are four simple interactions that takes place with Worldpay Within:  Discover ,  Select ,  Pay  and  Release .  Let's imagine that a car needs some fuel. It stops by a petrol station and broadcasts that it needs some fuel. The petrol station receives this signal, informs the car of how much fuel costs and what options are available, and once the shopper has agreed the price, then Worldpay will process the payment and inform the petrol station that it can fuel the car.   A demonstration of how to use Worldpay Within in four easy interactions   Discover -  Thing A (shopper)  broadcasts to  Thing B (merchant)  that it requires something.  Select - When  Thing B  receives  Thing A\u2019s  broadcast, it tells them the options and the shopper chooses one.  Pay -  Thing A  pays.  Release - Worldpay sends  Thing B  a secure token (a trusted trigger) to release the service to  Thing A.",
            "title": "How it works"
        },
        {
            "location": "/introduction/#hackathons",
            "text": "In 2016, Worldpay hosted the  Payments & IOT Hackathon  in which we wanted to take digital payments to the next level. In 2017, we're hosting another Hackathon in Romania, in which we release Worldpay Within.  Want to find out more? Head over to the  Hackathons  page.",
            "title": "Hackathons"
        },
        {
            "location": "/introduction/#its-open-source",
            "text": "Worldpay Within is open source, so why not give it a go yourself? You can find the GitHub library  here.  It's still an alpha based experiment, but we're actively building new features (and bug fixes) and are concurrently working on evolving the security architecture so we can take real payments.  If you'd like to contribute to the project, head over to the  Issues page  to see how you can help. And, of course, we'd love to see what you can come up with, so why not become a contributor?",
            "title": "It's open source"
        },
        {
            "location": "/introduction/#get-the-sdks",
            "text": "Worldpay Within's SDK is written in GoLang and runs on smart devices, including Raspberry Pi. It allows you to make and receive payments within the IoT. We've got wrappers in these languages:  \n   Go \n   Java \n   .NET \n   Python \n   Node.js",
            "title": "Get the SDKs"
        },
        {
            "location": "/introduction/#contact-us",
            "text": "If you've got any questions, or if you want to find out more, why not give us a shout at  Innovation@Worldpay.com .",
            "title": "Contact us"
        },
        {
            "location": "/atdc/",
            "text": "Setting up your Pi for Worldpay Within @ ATDC hackathon\n\u00b6\n\n\nQuick start\n\u00b6\n\n\n\n\nGet a pre-provisioned SD card, which should put you on the 'Connectify' network\n\n\nThe go, and RPi Python wrapper should be ready to go, the RPC agent is available for you to provision the other wrappers too. Speak to Conor or Kevin for help with this\n\n\n\n\nHow to see my transactions on Worldpay total?\n\u00b6\n\n\nDon't get this confused with the global/european system, for this hackathon you can view the transactions through the virtual terminal here: \nterminal.demo.securenet.com\n - login credentials from Clint\n\n\nAndroid wrapper ?\n\u00b6\n\n\nWe have not developed an Android wrapper, however there is one in development on the 'native-interface' branch, which allows you to call into the RPC-agent/SDC by going directly without need for RPC. This partially works, and is not certified, and is on older code, but you are free to experiment with this.\n\n\nProbably better is to use a 'proxy' Pi as your consumer, and expose each step / feature as a simple RESTful api, which the Android can call to orchestrate the flow, the business logic can then all be included in the Android app, with the Worldpay Within SDK running on the Pi. Please discuss with Conor for any more help on this topic\n\n\nSelf provision the Raspberry Pi\n\u00b6\n\n\n\n\nGet the Pi to the provisioning team so they can get it on the Connectify network, or choose Connectify with password: wpt1c123\n\n\nYou should now be able to do the rest yourself, by ssh-ing to the device at \nssh pi@wppi##\n e.g. for the Pi number 40: \nssh pi@wppi40\n\n\nChange to the directory with the Worldpay Within SDK in it: \n~/go/src/github.com/wptechinnovation/worldpay-within-sdk/\n\n\nChange to the develop branch \ngit checkout develop\n\n\nPull the latest code \ngit pull\n\n\nGet the latest RPC-agent for Raspberry pi \nwget http://bit.ly/wpwlinarm32\n\n\n\n\nHow to setup the python 2.7 wrapper\n\u00b6\n\n\n\n\nIf you want to use the 2.7 python wrapper, then download apache thrift 0.10.0 (latest version)\n\n\nExtract it and change to the \nlib/py/\n directory\n\n\nRun the following command \nsudo python setup.py install\n\n\nPlace the RPC-agent in the python wrapper directory: \n~/go/src/github.com/wptechinnovation/worldpay-within-sdk/wrappers/python_2-7\n\n\nRename to \nrpc-agent\n, run \nsudo chmod ugo+x rpc-agent\n\n\nTest run it with \n./rpc-agent -port 9018\n, then close it using ctrl-C and make sure it is killed using \nps -e | grep rpc-agent\n and if it's still running do a \nKill <process-id>\n\n\nYou're now ready to provision your device with your securenet credentials, and the run the example apps\n\n\n\n\nMore info about the python 2.7 wrapper\n\n\nHow to setup the other wrappers\n\u00b6\n\n\nIf you want to use the Java, Node.js, Python 3 or .Net wrappers then here is further information about the setup:\n\n\n\n\nJava wrapper - talk to Conor or Kevin, you'll need to setup a project with the source and pull in the libs\n\n\nNode.js\n - or talk to Conor\n\n\nPython 3 - talk to Kevin (HINT: once you've got this wrapper, theres a self contained setup.py)\n\n\n.net wrapper\n - or talk to Conor or Kevin\n\n\n\n\nEnvironment variables for accessing RPC-agent\n\u00b6\n\n\nNote that with various support on the wrappers (2.7 python does not yet support), you can use an environment variable for finding your rpc-agent\n\n\nSet the environmental variable \nWPW_HOME\n which is the path to the WPWithin Home. Binaries should go in the $WPW_HOME/bin directory.\n\n\nFor the node.js and Java wrappers, first check if $WPW_HOME is set. If so the wrappers launch the appropriately named rpc-agent from $WPW_HOME/bin/. If not then look for the RPC agent in the ./rpc-agent-bin/ directory. E.g. for Mac OS (go with it that it's called amd64...):\n\n\n\n\n$WPW_HOME/bin/rpc-agent-darwin-amd64\n\n\n./rpc-agent-bin/rpc-agent-darwin-amd64\n\n\n\n\nDeploying the Java wrapper to the Pi\n\u00b6\n\n\n\n\nAssuming you have the consumer or producer app setup in your favourite IDE\n\n\nDo a clean build of the consumer app to generate a dist directory\n\n\nCreate a \ndistribtopi\n directory\n\n\nCopy the contents of \ndist\n into the \ndistribtopi\n\n\nIn this directory create a subdirectory called \nrpc-agent-bin\n\n\nFrom the latest release, get the Raspberry pi rpc-agent \nrpc-agent-linux-arm32\n\n\nZip up this package and put onto your Pi however you prefer\n\n\nUnzip on the Pi\n\n\nRun the program with \njava -jar <Name-of-your-app>.jar\n\n\nAny issues you can't debug, come and have a chat with Kevin or Conor we're happy to help\n\n\n\n\nSupport\n\u00b6\n\n\nAny issues with setting up Worldpay Within (and the wrappers) on your Raspberry Pi or Development machine please reach out to Conor Hackett or Kevin Gordon, who will be able to support you over this weekend. They've familiar with a few gotchas, and will be able to get you up and running in no time!\n\n\nAlso you can join us on slack here: \nhttps://wpwithin-slack-in.herokuapp.com",
            "title": "The Atlanta Fintech Hackathon"
        },
        {
            "location": "/atdc/#setting-up-your-pi-for-worldpay-within-atdc-hackathon",
            "text": "",
            "title": "Setting up your Pi for Worldpay Within @ ATDC hackathon"
        },
        {
            "location": "/atdc/#quick-start",
            "text": "Get a pre-provisioned SD card, which should put you on the 'Connectify' network  The go, and RPi Python wrapper should be ready to go, the RPC agent is available for you to provision the other wrappers too. Speak to Conor or Kevin for help with this",
            "title": "Quick start"
        },
        {
            "location": "/atdc/#how-to-see-my-transactions-on-worldpay-total",
            "text": "Don't get this confused with the global/european system, for this hackathon you can view the transactions through the virtual terminal here:  terminal.demo.securenet.com  - login credentials from Clint",
            "title": "How to see my transactions on Worldpay total?"
        },
        {
            "location": "/atdc/#android-wrapper",
            "text": "We have not developed an Android wrapper, however there is one in development on the 'native-interface' branch, which allows you to call into the RPC-agent/SDC by going directly without need for RPC. This partially works, and is not certified, and is on older code, but you are free to experiment with this.  Probably better is to use a 'proxy' Pi as your consumer, and expose each step / feature as a simple RESTful api, which the Android can call to orchestrate the flow, the business logic can then all be included in the Android app, with the Worldpay Within SDK running on the Pi. Please discuss with Conor for any more help on this topic",
            "title": "Android wrapper ?"
        },
        {
            "location": "/atdc/#self-provision-the-raspberry-pi",
            "text": "Get the Pi to the provisioning team so they can get it on the Connectify network, or choose Connectify with password: wpt1c123  You should now be able to do the rest yourself, by ssh-ing to the device at  ssh pi@wppi##  e.g. for the Pi number 40:  ssh pi@wppi40  Change to the directory with the Worldpay Within SDK in it:  ~/go/src/github.com/wptechinnovation/worldpay-within-sdk/  Change to the develop branch  git checkout develop  Pull the latest code  git pull  Get the latest RPC-agent for Raspberry pi  wget http://bit.ly/wpwlinarm32",
            "title": "Self provision the Raspberry Pi"
        },
        {
            "location": "/atdc/#how-to-setup-the-python-27-wrapper",
            "text": "If you want to use the 2.7 python wrapper, then download apache thrift 0.10.0 (latest version)  Extract it and change to the  lib/py/  directory  Run the following command  sudo python setup.py install  Place the RPC-agent in the python wrapper directory:  ~/go/src/github.com/wptechinnovation/worldpay-within-sdk/wrappers/python_2-7  Rename to  rpc-agent , run  sudo chmod ugo+x rpc-agent  Test run it with  ./rpc-agent -port 9018 , then close it using ctrl-C and make sure it is killed using  ps -e | grep rpc-agent  and if it's still running do a  Kill <process-id>  You're now ready to provision your device with your securenet credentials, and the run the example apps   More info about the python 2.7 wrapper",
            "title": "How to setup the python 2.7 wrapper"
        },
        {
            "location": "/atdc/#how-to-setup-the-other-wrappers",
            "text": "If you want to use the Java, Node.js, Python 3 or .Net wrappers then here is further information about the setup:   Java wrapper - talk to Conor or Kevin, you'll need to setup a project with the source and pull in the libs  Node.js  - or talk to Conor  Python 3 - talk to Kevin (HINT: once you've got this wrapper, theres a self contained setup.py)  .net wrapper  - or talk to Conor or Kevin",
            "title": "How to setup the other wrappers"
        },
        {
            "location": "/atdc/#environment-variables-for-accessing-rpc-agent",
            "text": "Note that with various support on the wrappers (2.7 python does not yet support), you can use an environment variable for finding your rpc-agent  Set the environmental variable  WPW_HOME  which is the path to the WPWithin Home. Binaries should go in the $WPW_HOME/bin directory.  For the node.js and Java wrappers, first check if $WPW_HOME is set. If so the wrappers launch the appropriately named rpc-agent from $WPW_HOME/bin/. If not then look for the RPC agent in the ./rpc-agent-bin/ directory. E.g. for Mac OS (go with it that it's called amd64...):   $WPW_HOME/bin/rpc-agent-darwin-amd64  ./rpc-agent-bin/rpc-agent-darwin-amd64",
            "title": "Environment variables for accessing RPC-agent"
        },
        {
            "location": "/atdc/#deploying-the-java-wrapper-to-the-pi",
            "text": "Assuming you have the consumer or producer app setup in your favourite IDE  Do a clean build of the consumer app to generate a dist directory  Create a  distribtopi  directory  Copy the contents of  dist  into the  distribtopi  In this directory create a subdirectory called  rpc-agent-bin  From the latest release, get the Raspberry pi rpc-agent  rpc-agent-linux-arm32  Zip up this package and put onto your Pi however you prefer  Unzip on the Pi  Run the program with  java -jar <Name-of-your-app>.jar  Any issues you can't debug, come and have a chat with Kevin or Conor we're happy to help",
            "title": "Deploying the Java wrapper to the Pi"
        },
        {
            "location": "/atdc/#support",
            "text": "Any issues with setting up Worldpay Within (and the wrappers) on your Raspberry Pi or Development machine please reach out to Conor Hackett or Kevin Gordon, who will be able to support you over this weekend. They've familiar with a few gotchas, and will be able to get you up and running in no time!  Also you can join us on slack here:  https://wpwithin-slack-in.herokuapp.com",
            "title": "Support"
        },
        {
            "location": "/getting-started/",
            "text": "Worldpay Within is an open source project that provides a downloadable SDK that can be used as an API to provide a set of really cool services. For example, one device can pay for services from another.\n\n\nThe SDK is available in a number of supported languages that we refer to as \"wrappers\". While these provide the development kit to make the devices work in the expected way, you still need to get the core IoT componet from the releases - we refer to this as the \"RPC-agent\".\n\n\nMore information about the inner workings of the internal architecture can be found in the \nInternal architecture\n page.\n\n\n1. Get the SDK (software development kit) from the Github repository\n\u00b6\n\n\nYou'll need to either download or clone the SDK from the GitHub repository, which you can do \nhere\n.\n\n\n2. Download the core Iot component\n\u00b6\n\n\nYou'll then need the core component, which is sometimes called the \"RPC-agent\". You'll get these from the GitHub repo:\n\n\n\n\nGo to the \nrelease page\n.\n\n\nDownload the latest version of the 'wpwithin-\n-bins.tar.gz' zip file. For example, wpwithin-0.4-bins.tar.gz.\n\n\nYou just need to download the files you need for the computer and device you're going to develop on and use.\n\n\nUnzip the file rpc-agent-bins-\n.tar.gz.\n\n\nChoose the RPC-agent file appropriate to your Thing or development machine.\n\n\n\n\n3. Setup your environment Worldpay Within\n\u00b6\n\n\nYou'll need to drop the core IoT component (RPC-agent file) into the appropriate place in the SDK (or wrapper directory).\n\n\nFollow the instructions for each supported language on where to place the core IoT component (RPC-agent file) and what to call it. The instructions will also let you know if there are any other pre-requisites to install on your device before you get started.\n\n\n\n  \nJava\n\n  \n.NET\n\n  \nGo\n\n  \nNode.js\n\n  \nPython (2.7)",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#1-get-the-sdk-software-development-kit-from-the-github-repository",
            "text": "You'll need to either download or clone the SDK from the GitHub repository, which you can do  here .",
            "title": "1. Get the SDK (software development kit) from the Github repository"
        },
        {
            "location": "/getting-started/#2-download-the-core-iot-component",
            "text": "You'll then need the core component, which is sometimes called the \"RPC-agent\". You'll get these from the GitHub repo:   Go to the  release page .  Download the latest version of the 'wpwithin- -bins.tar.gz' zip file. For example, wpwithin-0.4-bins.tar.gz.  You just need to download the files you need for the computer and device you're going to develop on and use.  Unzip the file rpc-agent-bins- .tar.gz.  Choose the RPC-agent file appropriate to your Thing or development machine.",
            "title": "2. Download the core Iot component"
        },
        {
            "location": "/getting-started/#3-setup-your-environment-worldpay-within",
            "text": "You'll need to drop the core IoT component (RPC-agent file) into the appropriate place in the SDK (or wrapper directory).  Follow the instructions for each supported language on where to place the core IoT component (RPC-agent file) and what to call it. The instructions will also let you know if there are any other pre-requisites to install on your device before you get started.  \n   Java \n   .NET \n   Go \n   Node.js \n   Python (2.7)",
            "title": "3. Setup your environment Worldpay Within"
        },
        {
            "location": "/getit/",
            "text": "Worldpay Within SDK to allow payments within IoT. Written in GoLang. With wrappers for several languages, including Golang, Java, .net and Node.js. Designed for running on smart devices, including the Raspberry Pi.\n\n\n\n  \nDownload .zip\n\n  \nDownload .tar.gz\n\n  \nView on GitHub",
            "title": "Get the SDK"
        },
        {
            "location": "/the-flows/",
            "text": "We recommend following the below flows for consumer and producer devices. You can find a breakdown in each of the \nsteps below.\n\n\nThe devices are not synchronised by the SDK, so you'll need to ensure that the SDKs call the Worldpay Within API in the correct order. If you follow the steps below, then the outcome should be as expected.\n\n\nThe flows diagram\n\u00b6\n\n\n\n\nThe flows of the producer and consumer.\n\n\nThe Consumer flow\n\u00b6\n\n\nThis is the flow of the consumer, please note that these flow steps map to the interface either in Go or in the Wrapper - e.g. in Java this is fully documented in the javadoc.\n\n\n\n\n\n\n\n\nStep in Flow\n\n\nWhat it does\n\n\n\n\n\n\n\n\n\n\n1. SETUP\n\n\nSetups up the device\n\n\n\n\n\n\n2. DEVICE DISCOVERY\n\n\nDiscover devices that are broadcasting messages\n\n\n\n\n\n\n3. (CHOOSE MESSAGE)\n\n\nChoose the message, then use that information in the following steps\n\n\n\n\n\n\n4. INIT CONSUMER\n\n\nInitialises the device as a consumer\n\n\n\n\n\n\n5. REQUEST SERVICES\n\n\nRequest service messages from the device that is broadcasting, which lists what services it's offering\n\n\n\n\n\n\n6. GET SERVICE PRICES\n\n\nGet's the prices for the service you are interested in\n\n\n\n\n\n\n7. SELECT SERVICE\n\n\nSelects the service the device wants to consume\n\n\n\n\n\n\n8. MAKE PAYMENT\n\n\nMakes a payment for the service that is chosen\n\n\n\n\n\n\n9. BEGIN SERVICE DELIVERY\n\n\nStarts the process / flow to consume the service based on the service token received.\n\n\n\n\n\n\n10. STOP SERVICE DELIVERY\n\n\nCalled to tell the other thing that it has completed it's consumption of the service\n\n\n\n\n\n\n\n\nThe Producer flow\n\u00b6\n\n\nThis is the flow of the producer, please note that these flow steps map to the interface either in Go or in the Wrapper - e.g. in Java this is fully documented in the javadoc.\n\n\n\n\n\n\n\n\nStep in Flow\n\n\nWhat it does\n\n\n\n\n\n\n\n\n\n\n1. SETUP\n\n\nSetups the device\n\n\n\n\n\n\n2A. ADD SERVICE\n\n\nAdds a service to the producer\n\n\n\n\n\n\n2B. REMOVE SERVICE\n\n\nRemvoves a service from the producer\n\n\n\n\n\n\n3. INIT PRODUCER\n\n\nInitialises the producer\n\n\n\n\n\n\n4A. START BROADCAST\n\n\nStarts the producer broadcasting it's service message\n\n\n\n\n\n\n4B. STOP BROADCAST\n\n\nStops the producer from broadcasting it's service message",
            "title": "The Flows"
        },
        {
            "location": "/the-flows/#the-flows-diagram",
            "text": "The flows of the producer and consumer.",
            "title": "The flows diagram"
        },
        {
            "location": "/the-flows/#the-consumer-flow",
            "text": "This is the flow of the consumer, please note that these flow steps map to the interface either in Go or in the Wrapper - e.g. in Java this is fully documented in the javadoc.     Step in Flow  What it does      1. SETUP  Setups up the device    2. DEVICE DISCOVERY  Discover devices that are broadcasting messages    3. (CHOOSE MESSAGE)  Choose the message, then use that information in the following steps    4. INIT CONSUMER  Initialises the device as a consumer    5. REQUEST SERVICES  Request service messages from the device that is broadcasting, which lists what services it's offering    6. GET SERVICE PRICES  Get's the prices for the service you are interested in    7. SELECT SERVICE  Selects the service the device wants to consume    8. MAKE PAYMENT  Makes a payment for the service that is chosen    9. BEGIN SERVICE DELIVERY  Starts the process / flow to consume the service based on the service token received.    10. STOP SERVICE DELIVERY  Called to tell the other thing that it has completed it's consumption of the service",
            "title": "The Consumer flow"
        },
        {
            "location": "/the-flows/#the-producer-flow",
            "text": "This is the flow of the producer, please note that these flow steps map to the interface either in Go or in the Wrapper - e.g. in Java this is fully documented in the javadoc.     Step in Flow  What it does      1. SETUP  Setups the device    2A. ADD SERVICE  Adds a service to the producer    2B. REMOVE SERVICE  Remvoves a service from the producer    3. INIT PRODUCER  Initialises the producer    4A. START BROADCAST  Starts the producer broadcasting it's service message    4B. STOP BROADCAST  Stops the producer from broadcasting it's service message",
            "title": "The Producer flow"
        },
        {
            "location": "/api-spec/",
            "text": "For the alpha release, we made the decision to go with four different wrappers. Their documented API can be found here:\n\n\nThe flows diagram and introduction to the api is useful here too\n\n\n\n  \nJava (Javadoc)\n\n  \nPython 2.7 doc\n\n  \n.net / C# doc\n\n  \nNode.js doc\n\n\n\n\n\nSpecification\n\u00b6\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsetup\n\n\nSets up the wrapper to be able to start communicating with the underlying SDK.\n\n\n\n\n\n\naddService\n\n\nAdds a service of type WWService to the producer, used if the device you are operating on is a producer, if added to a device you intend as a consumer this will give that device producer functionality.\n\n\n\n\n\n\nremoveService\n\n\nThis removes the service from the producer\n\n\n\n\n\n\ninitConsumer\n\n\nThis initiates the device as a consumer, which enables it to find services, negotiate prices, make payments and receive services.\n\n\n\n\n\n\ninitProducer\n\n\nThis initiates the device as a producer / or initialises the devices producer capability.\n\n\n\n\n\n\ngetDevice\n\n\nThis is able to provide back details of the the current device that the SDK is running on, and it credentials / information.\n\n\n\n\n\n\nstartServiceBroadcast\n\n\nThis enables the producer device to start broadcasting itself via UDP broadcast over the network to notify devices it is available to be consumed.\n\n\n\n\n\n\nstopServiceBroadcast\n\n\nThis method stops the SDK from broadcasting the current service messages that it is broadcasting.\n\n\n\n\n\n\ndeviceDiscovery\n\n\nThis enables the consumer device to discovery other devices (producers) on the network that are UDP broadcasting.\n\n\n\n\n\n\nrequestServices\n\n\nGet a list of services that are available from the broadcasting device.\n\n\n\n\n\n\ngetServicePrices\n\n\nThis is used by the consumer to get the list of prices associated with a particular serviceId\n\n\n\n\n\n\nselectService\n\n\nSelection of a service is performed by the consumer, providing details of the service, the amount and at what price point it wants to purchase the service.\n\n\n\n\n\n\nmakePayment\n\n\nThis allows the consumer to request a payment be made at the producer device, by providing the total price response object as the request. The producer will then make the payment (or attempt to) and send back a Payment Response detailing whether it was successful or not.\n\n\n\n\n\n\nbeginServiceDelivery\n\n\nThis begins the service delivery, and is requested by the consumer, and will proceed as long as the correct information is provided to the producer. If the correct credentials are passed through, then the producer will start releasing the service known as a 'trusted trigger'\n\n\n\n\n\n\nendServiceDelivery\n\n\nThis ends the service delivery, a request initiated by the consumer.",
            "title": "API Specification"
        },
        {
            "location": "/api-spec/#specification",
            "text": "Parameter  Description      setup  Sets up the wrapper to be able to start communicating with the underlying SDK.    addService  Adds a service of type WWService to the producer, used if the device you are operating on is a producer, if added to a device you intend as a consumer this will give that device producer functionality.    removeService  This removes the service from the producer    initConsumer  This initiates the device as a consumer, which enables it to find services, negotiate prices, make payments and receive services.    initProducer  This initiates the device as a producer / or initialises the devices producer capability.    getDevice  This is able to provide back details of the the current device that the SDK is running on, and it credentials / information.    startServiceBroadcast  This enables the producer device to start broadcasting itself via UDP broadcast over the network to notify devices it is available to be consumed.    stopServiceBroadcast  This method stops the SDK from broadcasting the current service messages that it is broadcasting.    deviceDiscovery  This enables the consumer device to discovery other devices (producers) on the network that are UDP broadcasting.    requestServices  Get a list of services that are available from the broadcasting device.    getServicePrices  This is used by the consumer to get the list of prices associated with a particular serviceId    selectService  Selection of a service is performed by the consumer, providing details of the service, the amount and at what price point it wants to purchase the service.    makePayment  This allows the consumer to request a payment be made at the producer device, by providing the total price response object as the request. The producer will then make the payment (or attempt to) and send back a Payment Response detailing whether it was successful or not.    beginServiceDelivery  This begins the service delivery, and is requested by the consumer, and will proceed as long as the correct information is provided to the producer. If the correct credentials are passed through, then the producer will start releasing the service known as a 'trusted trigger'    endServiceDelivery  This ends the service delivery, a request initiated by the consumer.",
            "title": "Specification"
        },
        {
            "location": "/architecture/",
            "text": "The Worldpay Within Architecture\n\u00b6\n\n\nQuick intro\n\u00b6\n\n\nTo complement the Architecture we have released the Worldpay Within SDK. The intention for of the SDK is to encapsulate implementation and therefore assist third party vendors and developers in integration into their Internet of Things (IoT) solutions.\n\n\nThe core of the SDK is developed in the Go programming language with wrappers created for Java, Node.JS, Python and .net(C#). Service delivery and broadcast have been implemented using TCP/IP networking.\n\n\nFor more information about the low level service messaging, see click \nhere\n.\n\n\nArchitecture Overview\n\u00b6\n\n\nIn the IoT, each Thing will perform the function it is designed for be it acting as a sensor, a controller or both. In order for the Thing to be able to make and receive payments for services they can provide to other Things, they need to add the payments functionality contained in Worldpay Within.\n\n\n\n\nFigure 1. Worldpay Within Pluggable agent.\n\n\nThings in the IoT will be implemented on dedicated low cost processor systems. The Thing and Worldpay Within must co-exist and operate on the resources provided by these devices, as demonstrated in Figure 2.\n\n\n\n\nFigure 2. Worldpay Within Logical Overview.\n\n\nIn order to make and receive payments in the IoT, a Thing must be able to perform the roles of \u201cconsumer\u201d, to make a payment for services, and the \u201cmerchant\u201d or \"producer\", to receive a payment for provision of services. In the Worldpay Within IoT architecture, the \u201cconsumer\u201d pays for services by supporting Host Card Emulation (HCE). The \u201cmerchant\u201d or \"producer\" receives payments for services by supporting Host Terminal Emulation (HTE). Worldpay Within contains both an HCE Brain & HTE Brain functionalities, ensuring a Thing can both consume and supply services. These services are provided through a series of public APIs, described within this document.\n\n\nHCE and HTE require the secure storage and use of the credentials during the payments process. This requires the use of secure processing within the Thing in a \u201cSecure Execution Environment\u201d.\n\n\nFor HCE Things, these credentials include the details of the \u201ccard\u201d which the payment will be made from. For HTE Things, these credentials include the details the Merchant requires to perform transactions with Worldpay.\n\n\nAs well as the provision of the payment for the services, Worldpay Within provides for the generation and validation of secure service tokens, which allow for services to be consumed in part or together, but separately from the payments functionality.\n\n\nWorldpay Within IoT Service Architecture\n\u00b6\n\n\nThe provision of a service within the Worldpay IoT system is performed in 4 phases, as shown in Figure 4, these being: Service Discovery, Service Negotiation, Payment, and Service Delivery. Each of these phases are described in the following sections.\n\n\n\n\nFigure 4. The 4 phases of Worldpay Within.\n\n\nService Discovery\n\u00b6\n\n\nEach Thing that offers services, the service \u2018supplier\u2019 shall broadcast it\u2019s list of available services, as shown in Figure 4 below. When a potential \u2018consumer\u2019 of the service connects with \u2018supplier\u2019 it can request details of the services offered.\n\n\nProviding a suitable service is discovered, the consumer then requests the service from the supplier, and price negotiations can begin.\n\n\n\n\nFigure 5. IoT Service discovery.\n\n\nService Discovery APIs\n\u00b6\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nbroadcast\n\n\nserver_UUID\n\n\nAdvertising services and identifying the sender\n\n\n\n\n\n\nrequest services\n\n\nnone\n\n\nRequest a list of all services\n\n\n\n\n\n\nservices_response\n\n\nlist of services, server_UUID\n\n\nProvide client with a list of possible services that the sender can provide\n\n\n\n\n\n\n\n\nService discovery messages\n\u00b6\n\n\nA broadcast message that includes Thing B\u2019s UUID is sent.\n\n\nUpon receiving the message Thing A connects to Thing B and requests the list of available services.\n\n\nThing B responds with a list identifying the services available.\n\n\nService Negotiation\n\u00b6\n\n\nOnce a suitable service has been discovered, there will be a price negotiation. The provider may offer the same service at different rates depending on the number of units of service to be purchased. The process is outlined in Figure 5. The outcome of the process is an agreement to purchase an amount of service and a total price for the service to be provided. The service provider can then request payment for the agreed service and price.\n\n\n\n\nFigure 6. IoT Service Negotiation.\n\n\nService Negotiation APIs\n\u00b6\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nprice_request\n\n\nservice_id\n\n\nRequest a list of all prices for a given service.\n\n\n\n\n\n\nprice_response\n\n\nserver_UUID, list of prices, (service_id, price_id, price_per_unit, unit_ID, unit_description, price_description)\n\n\nProvide the client with a list of prices for a given service. A price object contains the per unit price.\n\n\n\n\n\n\nprice_select\n\n\nservice_id, price_id, number_of_units, client_UUID\n\n\nSelect a price with price_id, for service_id for a number of units.\n\n\n\n\n\n\nprice_select_response\n\n\nprice_id, number_of_units, total_price, server_UUID, client_UUID, payment_ref_ID, Merchant_Client_key\n\n\nCommunicate the expected total price to the client.\n\n\n\n\n\n\n\n\nService negotiation messages\n\u00b6\n\n\nA price request is sent containing the selected service_id.\n\n\nThe response from Thing B contains a list of price items; each item should contain a price_id, per unit price, unit_ID and description fields of both the unit and the price.\n\n\nThing A then selects an appropriate price_id by sending a request with its client_UUID, the selected service_id, the price_id, and the number of items required.\n\n\nIf the number of items falls within the correct number of items for the price selected, then Thing B responds with a price select response containing the service_id, price_id, the total price, the service_UUID and a reference for the payment and its Merchant Client key. Otherwise Thing B shall return the number of units it can supply along with the correct price, and additional details required to initiate the payment.\n\n\nPayment\n\u00b6\n\n\nThe payment process with Worldpay is a two stage process, split between the consumer and merchant Things involved in the transaction, these stages are:\n\n\n\n\n\n\nClient Token Request, and\n\n\n\n\n\n\nPayment Authorisation Request. (Also known as Order Request)\n\n\n\n\n\n\nDuring the first stage, the consumer sends Worldpay their payment credentials and the merchants Client Key. We return a Client Token, which the consumer passes to the Merchant. This allows the merchant to perform the payment authorisation request with Worldpay by providing the Client Token and transaction details.\n\n\nThis payment process ensures that the consumer does not pass their payment credentials to the merchant, only to Worldpay.\n\n\nClient token request\n\u00b6\n\n\nThe first step in the payment process is when Thing A receives the Merchant_Client_Key from Thing B. Thing B passes their public Client Key to Thing A as part of the price_select_response during the Service Negotiation phase. Upon receiving the Client Key from Thing B, Thing A connects with Worldpay to request the client token from us. This request includes Thing A\u2019s payment credentials: Card PAN, expiry, and the client_key of Thing B. Worldpay will respond with a message that includes a client_token. This is shown in Figure 7.\n\n\n\n\nFigure 7. IoT Payment process - client token request.\n\n\nClient token request APIs\n\u00b6\n\n\nThing A to Worldpay client token request\n\u00b6\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nclient_token_request\n\n\nPayment_method, reusable_flag, Merchant_client_key Payment_method (name, PAN, expiryMonth, expiryYear, type)\n\n\nRequest a client token from Worldpay, whilst providing us with the payment credentials.\n\n\n\n\n\n\nclient_token_response\n\n\nclient_token, reusable_flag, payment_method_response (type, name, expiryMonth, expiryYear, card_type, card_scheme_type, card_scheme_name, masked_card_number, card_product_type_description_non_contactless, card_product_type_description_contactless, card_issuer, country_code, card_class, pre-paid)\n\n\nResponse from Worldpay containing the client_token.\n\n\n\n\n\n\nPayment_request\n\n\nclient_token, client_UUID, payment_ref_ID\n\n\nThe client_token is passed to Thing B to allow the 2\nnd\n part of the transaction process to take place.\n\n\n\n\n\n\n\n\nThing A will connect to Worldpay using TLS. It will then request a client_token by securely (see 2.2.1) sending a JSON message containing the paymentMethod, its payment credentials (PAN, expiry) to us, along with the client_ key from Thing B. In addition a flag indicating if the client details can be used in future is sent, for IoT this should always be set \u2018reusable\u2019:\u2019false\u2019 in order to force generation of a new client token for each transaction.\n\n\nA successful response will be an HTTP POST response containing fields: client_token, reusable_flag and the payment_method_response. Once received, the client_token shall be passed to Thing B\n\n\nA sample request is shown in Appendix B: Sample Service Messaging.\n\n\nSee \nAPI keys\n for documentation for client_token_request and client_token_repsonse APIs data descriptions.\n\n\nPayment authorisation request\n\u00b6\n\n\nThing B will process the order and request the payment from Worldpay providing its Service key, client_token, transaction currency and payment amount. This is transmitted to Worldpay over TLS. After successful processing the payment, Worldpay will provide a payment response. Thing B shall then generate a service token, which Thing A may use in future to obtain the services that the payment has been made for. This is shown in Figure 7.\n\n\n\n\nFigure 8. Payment Authorisation Request.\n\n\nPayment authorisation request APIs\n\u00b6\n\n\nThing B to Worldpay payment authorisation request\n\u00b6\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\norder_request\n\n\nclient_service_key, client_token, currency_code, amount, order_description, customer_order_code\n\n\nRequest payment from Worldpay.\n\n\n\n\n\n\norder_response\n\n\norder_code, client_token, order_description, amount, currency_code, payment_status, customer_order_code, environment, risk_score, payment_response (type, name, expiryMonth, expiryYear, card_type, card_scheme_type, card_scheme_name, masked_card_number, card_product_type_description_non_contactless, card_product_type_description_contactless, card_issuer, country_code, card_class, pre-paid)\n\n\nPayment response indicating a successful transaction on the Worldpay platform.\n\n\n\n\n\n\n\n\nThing B shall assemble a message to be posted to Worldpay that contains the client token, Service key, the amount, currency and transaction description. We will then perform an authorisation using the payment credentials identified by the client_token. A successful authorisation will result in a payment_status of SUCCESS being returned to Thing B.\n\n\nThing B to Thing A service token\n\u00b6\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\npayment_request_response\n\n\nservice_delivery_token, server_UUID, client_UUID, total_paid\n\n\nservice_delivery_token is passed to ThingB.\n\n\n\n\n\n\n\n\nThing B shall then generate a cryptographically secure service_delivery_token, which can be used by Thing A to request provision of services from Thing B.\n\n\nService Delivery\n\u00b6\n\n\nOnce the payment has been made, Thing B shall return to broadcasting its available services. Thing A will now be able to consume the service from Thing B by providing the service_delivery_token. The service delivery may be in a single step, or over time. An overview of service delivery is shown in Figure 8.\n\n\n\n\nFigure 8. Service delivery.\n\n\nOnce in possession of a service_token, Thing A may then request the service be provided. The service could be consumed in one session, or in several sessions over time, depending on the nature of the service and number of units purchased. Thing A may repeatedly send service delivery requests until Thing B indicates that the service has been delivered.\n\n\nService Delivery APIs\n\u00b6\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\npayment_request_response\n\n\nservice_delivery_token, server_UUID, client_UUID, total_paid\n\n\nservice_delivery_token is passed to ThingB.\n\n\n\n\n\n\nbroadcast\n\n\nserver_UUID\n\n\nAdvertising services and identifying the sender.\n\n\n\n\n\n\ndelivery_begin_request\n\n\nservice_delivery_token, client_UUID, number_of_units_to_supply\n\n\nRequest the service item, with the service_delivery_token providing right to receive the service, and amount of service to be supplied.\n\n\n\n\n\n\ndelivery_begin_response\n\n\nserver_UUID, service_delivery_token, client_UUID, number_of_units_to_be_supplied\n\n\nResponse for the service delivery. Confirmation of number of service units to be supplied (Allowing for less units than requested).\n\n\n\n\n\n\ndelivery_end\n\n\nclient_UUID, number_of_units_received\n\n\nConfirmation of service received.\n\n\n\n\n\n\ndelivery_end_response\n\n\nserver_UUID, service_delivery_token, client_UUID, number_of_units_just_supplied, number_of_units_remaining\n\n\nService end indicating outstanding service credits and token for subsequent delivery.\n\n\n\n\n\n\n\n\nThing A sends a message with the service_delivery_token to Thing B, along with the amount of service it wishes to consume. The response shall confirm the amount of service units that Thing B can supply to Thing A at that time. Once the service has been delivered, Thing A shall confirm the amount of service units it has received, with Thing B responding, stating the number of units still remaining to Thing A, if any.\n\n\nUseful terms\n\u00b6\n\n\nA few useful terms we're making quite a lot of use of, and if you are new to the world of payments these may be unfamiliar to you!\n\n\n\n\n\n\n\n\nTerm\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nAPI\n\n\nApplication Programming Interface\n\n\n\n\n\n\nWorldpay\n\n\nWorldpay Open Payment API, \nhttps://online.worldpay.com/\n\n\n\n\n\n\nHCE\n\n\nHost Card Emulation\n\n\n\n\n\n\nHTE\n\n\nHost Terminal Emulation\n\n\n\n\n\n\nHTTPS\n\n\nHyperText Transfer Protocol Secure\n\n\n\n\n\n\nIoT\n\n\nInternet of Things\n\n\n\n\n\n\nP2PE\n\n\nPoint to Point Encryption\n\n\n\n\n\n\nTLS\n\n\nTransport Layer Security\n\n\n\n\n\n\nUUID\n\n\nUniversally Unique Identifier\n\n\n\n\n\n\nRPC\n\n\nRemote Procedure Call",
            "title": "Architecture"
        },
        {
            "location": "/architecture/#the-worldpay-within-architecture",
            "text": "",
            "title": "The Worldpay Within Architecture"
        },
        {
            "location": "/architecture/#quick-intro",
            "text": "To complement the Architecture we have released the Worldpay Within SDK. The intention for of the SDK is to encapsulate implementation and therefore assist third party vendors and developers in integration into their Internet of Things (IoT) solutions.  The core of the SDK is developed in the Go programming language with wrappers created for Java, Node.JS, Python and .net(C#). Service delivery and broadcast have been implemented using TCP/IP networking.  For more information about the low level service messaging, see click  here .",
            "title": "Quick intro"
        },
        {
            "location": "/architecture/#architecture-overview",
            "text": "In the IoT, each Thing will perform the function it is designed for be it acting as a sensor, a controller or both. In order for the Thing to be able to make and receive payments for services they can provide to other Things, they need to add the payments functionality contained in Worldpay Within.   Figure 1. Worldpay Within Pluggable agent.  Things in the IoT will be implemented on dedicated low cost processor systems. The Thing and Worldpay Within must co-exist and operate on the resources provided by these devices, as demonstrated in Figure 2.   Figure 2. Worldpay Within Logical Overview.  In order to make and receive payments in the IoT, a Thing must be able to perform the roles of \u201cconsumer\u201d, to make a payment for services, and the \u201cmerchant\u201d or \"producer\", to receive a payment for provision of services. In the Worldpay Within IoT architecture, the \u201cconsumer\u201d pays for services by supporting Host Card Emulation (HCE). The \u201cmerchant\u201d or \"producer\" receives payments for services by supporting Host Terminal Emulation (HTE). Worldpay Within contains both an HCE Brain & HTE Brain functionalities, ensuring a Thing can both consume and supply services. These services are provided through a series of public APIs, described within this document.  HCE and HTE require the secure storage and use of the credentials during the payments process. This requires the use of secure processing within the Thing in a \u201cSecure Execution Environment\u201d.  For HCE Things, these credentials include the details of the \u201ccard\u201d which the payment will be made from. For HTE Things, these credentials include the details the Merchant requires to perform transactions with Worldpay.  As well as the provision of the payment for the services, Worldpay Within provides for the generation and validation of secure service tokens, which allow for services to be consumed in part or together, but separately from the payments functionality.",
            "title": "Architecture Overview"
        },
        {
            "location": "/architecture/#worldpay-within-iot-service-architecture",
            "text": "The provision of a service within the Worldpay IoT system is performed in 4 phases, as shown in Figure 4, these being: Service Discovery, Service Negotiation, Payment, and Service Delivery. Each of these phases are described in the following sections.   Figure 4. The 4 phases of Worldpay Within.",
            "title": "Worldpay Within IoT Service Architecture"
        },
        {
            "location": "/architecture/#service-discovery",
            "text": "Each Thing that offers services, the service \u2018supplier\u2019 shall broadcast it\u2019s list of available services, as shown in Figure 4 below. When a potential \u2018consumer\u2019 of the service connects with \u2018supplier\u2019 it can request details of the services offered.  Providing a suitable service is discovered, the consumer then requests the service from the supplier, and price negotiations can begin.   Figure 5. IoT Service discovery.",
            "title": "Service Discovery"
        },
        {
            "location": "/architecture/#service-discovery-apis",
            "text": "Key  Parameters  Purpose      broadcast  server_UUID  Advertising services and identifying the sender    request services  none  Request a list of all services    services_response  list of services, server_UUID  Provide client with a list of possible services that the sender can provide",
            "title": "Service Discovery APIs"
        },
        {
            "location": "/architecture/#service-discovery-messages",
            "text": "A broadcast message that includes Thing B\u2019s UUID is sent.  Upon receiving the message Thing A connects to Thing B and requests the list of available services.  Thing B responds with a list identifying the services available.",
            "title": "Service discovery messages"
        },
        {
            "location": "/architecture/#service-negotiation",
            "text": "Once a suitable service has been discovered, there will be a price negotiation. The provider may offer the same service at different rates depending on the number of units of service to be purchased. The process is outlined in Figure 5. The outcome of the process is an agreement to purchase an amount of service and a total price for the service to be provided. The service provider can then request payment for the agreed service and price.   Figure 6. IoT Service Negotiation.",
            "title": "Service Negotiation"
        },
        {
            "location": "/architecture/#service-negotiation-apis",
            "text": "Key  Parameters  Purpose      price_request  service_id  Request a list of all prices for a given service.    price_response  server_UUID, list of prices, (service_id, price_id, price_per_unit, unit_ID, unit_description, price_description)  Provide the client with a list of prices for a given service. A price object contains the per unit price.    price_select  service_id, price_id, number_of_units, client_UUID  Select a price with price_id, for service_id for a number of units.    price_select_response  price_id, number_of_units, total_price, server_UUID, client_UUID, payment_ref_ID, Merchant_Client_key  Communicate the expected total price to the client.",
            "title": "Service Negotiation APIs"
        },
        {
            "location": "/architecture/#service-negotiation-messages",
            "text": "A price request is sent containing the selected service_id.  The response from Thing B contains a list of price items; each item should contain a price_id, per unit price, unit_ID and description fields of both the unit and the price.  Thing A then selects an appropriate price_id by sending a request with its client_UUID, the selected service_id, the price_id, and the number of items required.  If the number of items falls within the correct number of items for the price selected, then Thing B responds with a price select response containing the service_id, price_id, the total price, the service_UUID and a reference for the payment and its Merchant Client key. Otherwise Thing B shall return the number of units it can supply along with the correct price, and additional details required to initiate the payment.",
            "title": "Service negotiation messages"
        },
        {
            "location": "/architecture/#payment",
            "text": "The payment process with Worldpay is a two stage process, split between the consumer and merchant Things involved in the transaction, these stages are:    Client Token Request, and    Payment Authorisation Request. (Also known as Order Request)    During the first stage, the consumer sends Worldpay their payment credentials and the merchants Client Key. We return a Client Token, which the consumer passes to the Merchant. This allows the merchant to perform the payment authorisation request with Worldpay by providing the Client Token and transaction details.  This payment process ensures that the consumer does not pass their payment credentials to the merchant, only to Worldpay.",
            "title": "Payment"
        },
        {
            "location": "/architecture/#client-token-request",
            "text": "The first step in the payment process is when Thing A receives the Merchant_Client_Key from Thing B. Thing B passes their public Client Key to Thing A as part of the price_select_response during the Service Negotiation phase. Upon receiving the Client Key from Thing B, Thing A connects with Worldpay to request the client token from us. This request includes Thing A\u2019s payment credentials: Card PAN, expiry, and the client_key of Thing B. Worldpay will respond with a message that includes a client_token. This is shown in Figure 7.   Figure 7. IoT Payment process - client token request.",
            "title": "Client token request"
        },
        {
            "location": "/architecture/#client-token-request-apis",
            "text": "",
            "title": "Client token request APIs"
        },
        {
            "location": "/architecture/#thing-a-to-worldpay-client-token-request",
            "text": "Key  Parameters  Purpose      client_token_request  Payment_method, reusable_flag, Merchant_client_key Payment_method (name, PAN, expiryMonth, expiryYear, type)  Request a client token from Worldpay, whilst providing us with the payment credentials.    client_token_response  client_token, reusable_flag, payment_method_response (type, name, expiryMonth, expiryYear, card_type, card_scheme_type, card_scheme_name, masked_card_number, card_product_type_description_non_contactless, card_product_type_description_contactless, card_issuer, country_code, card_class, pre-paid)  Response from Worldpay containing the client_token.    Payment_request  client_token, client_UUID, payment_ref_ID  The client_token is passed to Thing B to allow the 2 nd  part of the transaction process to take place.     Thing A will connect to Worldpay using TLS. It will then request a client_token by securely (see 2.2.1) sending a JSON message containing the paymentMethod, its payment credentials (PAN, expiry) to us, along with the client_ key from Thing B. In addition a flag indicating if the client details can be used in future is sent, for IoT this should always be set \u2018reusable\u2019:\u2019false\u2019 in order to force generation of a new client token for each transaction.  A successful response will be an HTTP POST response containing fields: client_token, reusable_flag and the payment_method_response. Once received, the client_token shall be passed to Thing B  A sample request is shown in Appendix B: Sample Service Messaging.  See  API keys  for documentation for client_token_request and client_token_repsonse APIs data descriptions.",
            "title": "Thing A to Worldpay client token request"
        },
        {
            "location": "/architecture/#payment-authorisation-request",
            "text": "Thing B will process the order and request the payment from Worldpay providing its Service key, client_token, transaction currency and payment amount. This is transmitted to Worldpay over TLS. After successful processing the payment, Worldpay will provide a payment response. Thing B shall then generate a service token, which Thing A may use in future to obtain the services that the payment has been made for. This is shown in Figure 7.   Figure 8. Payment Authorisation Request.",
            "title": "Payment authorisation request"
        },
        {
            "location": "/architecture/#payment-authorisation-request-apis",
            "text": "",
            "title": "Payment authorisation request APIs"
        },
        {
            "location": "/architecture/#thing-b-to-worldpay-payment-authorisation-request",
            "text": "Key  Parameters  Purpose      order_request  client_service_key, client_token, currency_code, amount, order_description, customer_order_code  Request payment from Worldpay.    order_response  order_code, client_token, order_description, amount, currency_code, payment_status, customer_order_code, environment, risk_score, payment_response (type, name, expiryMonth, expiryYear, card_type, card_scheme_type, card_scheme_name, masked_card_number, card_product_type_description_non_contactless, card_product_type_description_contactless, card_issuer, country_code, card_class, pre-paid)  Payment response indicating a successful transaction on the Worldpay platform.     Thing B shall assemble a message to be posted to Worldpay that contains the client token, Service key, the amount, currency and transaction description. We will then perform an authorisation using the payment credentials identified by the client_token. A successful authorisation will result in a payment_status of SUCCESS being returned to Thing B.",
            "title": "Thing B to Worldpay payment authorisation request"
        },
        {
            "location": "/architecture/#thing-b-to-thing-a-service-token",
            "text": "Key  Parameters  Purpose      payment_request_response  service_delivery_token, server_UUID, client_UUID, total_paid  service_delivery_token is passed to ThingB.     Thing B shall then generate a cryptographically secure service_delivery_token, which can be used by Thing A to request provision of services from Thing B.",
            "title": "Thing B to Thing A service token"
        },
        {
            "location": "/architecture/#service-delivery",
            "text": "Once the payment has been made, Thing B shall return to broadcasting its available services. Thing A will now be able to consume the service from Thing B by providing the service_delivery_token. The service delivery may be in a single step, or over time. An overview of service delivery is shown in Figure 8.   Figure 8. Service delivery.  Once in possession of a service_token, Thing A may then request the service be provided. The service could be consumed in one session, or in several sessions over time, depending on the nature of the service and number of units purchased. Thing A may repeatedly send service delivery requests until Thing B indicates that the service has been delivered.",
            "title": "Service Delivery"
        },
        {
            "location": "/architecture/#service-delivery-apis",
            "text": "Key  Parameters  Purpose      payment_request_response  service_delivery_token, server_UUID, client_UUID, total_paid  service_delivery_token is passed to ThingB.    broadcast  server_UUID  Advertising services and identifying the sender.    delivery_begin_request  service_delivery_token, client_UUID, number_of_units_to_supply  Request the service item, with the service_delivery_token providing right to receive the service, and amount of service to be supplied.    delivery_begin_response  server_UUID, service_delivery_token, client_UUID, number_of_units_to_be_supplied  Response for the service delivery. Confirmation of number of service units to be supplied (Allowing for less units than requested).    delivery_end  client_UUID, number_of_units_received  Confirmation of service received.    delivery_end_response  server_UUID, service_delivery_token, client_UUID, number_of_units_just_supplied, number_of_units_remaining  Service end indicating outstanding service credits and token for subsequent delivery.     Thing A sends a message with the service_delivery_token to Thing B, along with the amount of service it wishes to consume. The response shall confirm the amount of service units that Thing B can supply to Thing A at that time. Once the service has been delivered, Thing A shall confirm the amount of service units it has received, with Thing B responding, stating the number of units still remaining to Thing A, if any.",
            "title": "Service Delivery APIs"
        },
        {
            "location": "/architecture/#useful-terms",
            "text": "A few useful terms we're making quite a lot of use of, and if you are new to the world of payments these may be unfamiliar to you!     Term  Definition      API  Application Programming Interface    Worldpay  Worldpay Open Payment API,  https://online.worldpay.com/    HCE  Host Card Emulation    HTE  Host Terminal Emulation    HTTPS  HyperText Transfer Protocol Secure    IoT  Internet of Things    P2PE  Point to Point Encryption    TLS  Transport Layer Security    UUID  Universally Unique Identifier    RPC  Remote Procedure Call",
            "title": "Useful terms"
        },
        {
            "location": "/internal-structure/",
            "text": "Internal Structure of Worldpay Within\n\u00b6\n\n\nWhat is Worldpay Within and what does Worldpay within do\n\u00b6\n\n\nWorldpay is an embeddable payments agent, for the Internet of Things (IoT) that can be 'plugged' into your app for a smart device, enabling it to discover services of other devices, pay for those services, and then consume those services. Conversely it also allows your smart device to expose services to consumers, receive payments for those services, and then release services to a consumer using the idea of a 'Trusted Trigger'.\n\n\nIt is all about enabling payments in IoT, and allowing smart devices to communicate with each other and exchange value for services in IoT\n\n\nSo a consumer is a smart device which is looking for services, pays for services and consumes services\n\n\nOn the other hand a producer is a smart device that is able to advertise availability of it's owner services to consumers, then negotiate a payment, take a payment, and release those services to the trusted consumer that made the payment\n\n\n\n\nWhat Worldpay Within Does.\n\n\nThe use case shown in the example above has a smart car looking for parking, and paying a smart parking meter for parking in it's parking bay. The smart car \"wants to park\", so has HCE (Host Card Emulation; card credentials), it acts as a shopper. When trying to make a payment, it will go off to the Worldpay online payments gateway and request tokenised card credentials based on the smart device it is trying to consume services from.\n\n\nThis token is then securely passed to the parking meter. In this case the parking meter is the Producer, or is acting as the merchant, or HTE (Host Terminal Emulation, accepting payment), which then directly communicates with the online Worldpay gateway to make a 'card on file' or 'eCommerce' type payment authorisation request. With the payment authorised it then releases the purchased service to the consumer.\n\n\nThe beauty of Worldpay Within is that it enables smart devices to both make payments and receive payments. In this example above the parking meter could then go on to make payments to the electricity companies smart hub which is powering it.\n\n\nHow the Wrapper works\n\u00b6\n\n\n\n\nHow the Wrapper Works.\n\n\nOn the left-hand side you have the SDK, on the right-hand side you have the Wrapper, in this case the Java Core. The SDK in Golang has an RPC layer on top which is exposed via Thrift. The Java Core or Wrapper, is built up of the Thrift layer which does the RPC comms to the core SDK. Plus the wrapper acts as an adapter converting all the data / objects / errors into Pojos that the Java core, or the app you are building can work with.\n\n\nThe important thing to recognise here is that none of the Thrift layer is exposed to you as a developer, and all the RPC calls are handled for you, so essentially you are calling the Worldpay Within seamlessly, managed by the Worldpay Within Wrapper in the appropriate language you are working in\n\n\nHow the wrapper and SDK work\n\u00b6\n\n\n\n\nHow the wrapper and SDK work.\n\n\nThis is another view on the SDK and the app - this scenario there are two devices with Worldpay Within installed on them, and they communicate over the internet. You'll note that one is the 'consumer' and the other is the 'producer', as explained above. Now as you go down the layers, you have the RPC layer, then the Thrift layer and finally the wrapper layer, which is above to communicate with the SDK via RPC calls, what is not shown is your app will be the next layer shown on the diagram.\n\n\nIn this scenario, the producer is UDP broadcasting a service message, which includes what it's hostname, IP and UrlPrefix are. Once the consumer does device discovery, it is able to communicate over HTTP with the restful endpoint on the producer to find out what services it offers, and then begins the rest of the flow\n\n\nWhat's happening inside the SDK\n\u00b6\n\n\nCertainly for the first release, we have open sourced the wrappers and example apps, but kept the internals of the Golang SDK closed source, however with the appropriate success of the project, we shall consider open sourcing this component too.\n\n\nIt is useful, of course, to know exactly what is happening inside this black box, so the following details the architecture of Worldpay Within and what is happening in the internals\n\n\nThe Worldpay Within Architecture",
            "title": "Internal Structure"
        },
        {
            "location": "/internal-structure/#internal-structure-of-worldpay-within",
            "text": "",
            "title": "Internal Structure of Worldpay Within"
        },
        {
            "location": "/internal-structure/#what-is-worldpay-within-and-what-does-worldpay-within-do",
            "text": "Worldpay is an embeddable payments agent, for the Internet of Things (IoT) that can be 'plugged' into your app for a smart device, enabling it to discover services of other devices, pay for those services, and then consume those services. Conversely it also allows your smart device to expose services to consumers, receive payments for those services, and then release services to a consumer using the idea of a 'Trusted Trigger'.  It is all about enabling payments in IoT, and allowing smart devices to communicate with each other and exchange value for services in IoT  So a consumer is a smart device which is looking for services, pays for services and consumes services  On the other hand a producer is a smart device that is able to advertise availability of it's owner services to consumers, then negotiate a payment, take a payment, and release those services to the trusted consumer that made the payment   What Worldpay Within Does.  The use case shown in the example above has a smart car looking for parking, and paying a smart parking meter for parking in it's parking bay. The smart car \"wants to park\", so has HCE (Host Card Emulation; card credentials), it acts as a shopper. When trying to make a payment, it will go off to the Worldpay online payments gateway and request tokenised card credentials based on the smart device it is trying to consume services from.  This token is then securely passed to the parking meter. In this case the parking meter is the Producer, or is acting as the merchant, or HTE (Host Terminal Emulation, accepting payment), which then directly communicates with the online Worldpay gateway to make a 'card on file' or 'eCommerce' type payment authorisation request. With the payment authorised it then releases the purchased service to the consumer.  The beauty of Worldpay Within is that it enables smart devices to both make payments and receive payments. In this example above the parking meter could then go on to make payments to the electricity companies smart hub which is powering it.",
            "title": "What is Worldpay Within and what does Worldpay within do"
        },
        {
            "location": "/internal-structure/#how-the-wrapper-works",
            "text": "How the Wrapper Works.  On the left-hand side you have the SDK, on the right-hand side you have the Wrapper, in this case the Java Core. The SDK in Golang has an RPC layer on top which is exposed via Thrift. The Java Core or Wrapper, is built up of the Thrift layer which does the RPC comms to the core SDK. Plus the wrapper acts as an adapter converting all the data / objects / errors into Pojos that the Java core, or the app you are building can work with.  The important thing to recognise here is that none of the Thrift layer is exposed to you as a developer, and all the RPC calls are handled for you, so essentially you are calling the Worldpay Within seamlessly, managed by the Worldpay Within Wrapper in the appropriate language you are working in",
            "title": "How the Wrapper works"
        },
        {
            "location": "/internal-structure/#how-the-wrapper-and-sdk-work",
            "text": "How the wrapper and SDK work.  This is another view on the SDK and the app - this scenario there are two devices with Worldpay Within installed on them, and they communicate over the internet. You'll note that one is the 'consumer' and the other is the 'producer', as explained above. Now as you go down the layers, you have the RPC layer, then the Thrift layer and finally the wrapper layer, which is above to communicate with the SDK via RPC calls, what is not shown is your app will be the next layer shown on the diagram.  In this scenario, the producer is UDP broadcasting a service message, which includes what it's hostname, IP and UrlPrefix are. Once the consumer does device discovery, it is able to communicate over HTTP with the restful endpoint on the producer to find out what services it offers, and then begins the rest of the flow",
            "title": "How the wrapper and SDK work"
        },
        {
            "location": "/internal-structure/#whats-happening-inside-the-sdk",
            "text": "Certainly for the first release, we have open sourced the wrappers and example apps, but kept the internals of the Golang SDK closed source, however with the appropriate success of the project, we shall consider open sourcing this component too.  It is useful, of course, to know exactly what is happening inside this black box, so the following details the architecture of Worldpay Within and what is happening in the internals  The Worldpay Within Architecture",
            "title": "What's happening inside the SDK"
        },
        {
            "location": "/hackathons/",
            "text": "Payments & IoT Hackathons\n\u00b6\n\n\nComing soon - September 2017 - Romania hackathon\n\u00b6\n\n\nIn September, we're hosting another hackthon, this time in Romania. If you want to join, email [what's the email?]\n\n\nSo, if you love payments and the IoT, and you think this is something you'd enjoy, make you sure get registered in time. \nClick here\n\n\nFebruary 2017 - Atlanta hackathon, featuring Worldpay Within\n\u00b6\n\n\nWorldpay US was a sponsor of the ATDC Fintech Hackathon, a weekend in which 18 teams competed in a battle to demonstrate how well they integrated either Worldpay or TSYS APIs into their own applications.\n\n\nAtlanta hackathon page\n\n\nSeptember 2016 - Our Inaugral Payments & Iot hackathon\n\u00b6\n\n\nWorldpay's Technology Innovation team held their first Internet of Things (IoT) hackathon at the Impact Hub in Westminster, London. It was the first time they'd hosted a hackathon and it was attended by over 80 technologists and experienced coders, who came together to explore use-cases for exciting mobile payments and new IoT open-source technology.\n\n\nOver the weekend, the participants brought to life a range of innovative concepts from building a payment system following a natural disaster, to payments apps for the sharing economy.\n\n\nWatch the video\n\u00b6\n\n\n\n\n\nBit more info about the video and press releases\n\n\nLink to the press releases",
            "title": "Hackathons"
        },
        {
            "location": "/hackathons/#payments-iot-hackathons",
            "text": "",
            "title": "Payments &amp; IoT Hackathons"
        },
        {
            "location": "/hackathons/#coming-soon-september-2017-romania-hackathon",
            "text": "In September, we're hosting another hackthon, this time in Romania. If you want to join, email [what's the email?]  So, if you love payments and the IoT, and you think this is something you'd enjoy, make you sure get registered in time.  Click here",
            "title": "Coming soon - September 2017 - Romania hackathon"
        },
        {
            "location": "/hackathons/#february-2017-atlanta-hackathon-featuring-worldpay-within",
            "text": "Worldpay US was a sponsor of the ATDC Fintech Hackathon, a weekend in which 18 teams competed in a battle to demonstrate how well they integrated either Worldpay or TSYS APIs into their own applications.  Atlanta hackathon page",
            "title": "February 2017 - Atlanta hackathon, featuring Worldpay Within"
        },
        {
            "location": "/hackathons/#september-2016-our-inaugral-payments-iot-hackathon",
            "text": "Worldpay's Technology Innovation team held their first Internet of Things (IoT) hackathon at the Impact Hub in Westminster, London. It was the first time they'd hosted a hackathon and it was attended by over 80 technologists and experienced coders, who came together to explore use-cases for exciting mobile payments and new IoT open-source technology.  Over the weekend, the participants brought to life a range of innovative concepts from building a payment system following a natural disaster, to payments apps for the sharing economy.",
            "title": "September 2016 - Our Inaugral Payments &amp; Iot hackathon"
        },
        {
            "location": "/hackathons/#watch-the-video",
            "text": "Bit more info about the video and press releases  Link to the press releases",
            "title": "Watch the video"
        },
        {
            "location": "/quick-start/",
            "text": "1. Understand the recommended flows\n\u00b6\n\n\nBefore you get started, it's worth familiarising yourself with how Worldpay Within works. We'd recommend following the pre-established flows in the order they are presented for each Thing (Machine A and Machine B). If you stray from the flows, we cannot guarantee that the SDKs will work.\n\n\nWe recommend following the below flows for consumer and producer devices. You can find a breakdown in each of the \nsteps below.\n\n\nThe devices are not synchronised by the SDK, so you'll need to ensure that the SDKs call the Worldpay Within API in the correct order. If you follow the steps below, then the outcome should be as expected.\n\n\nWorldpay Within flow\n\u00b6\n\n\n\n\nThe flows of the producer and consumer.\n\n\nThe Consumer flow\n\u00b6\n\n\nThe consumer device should follow this flow. These steps should map to the interface either in Go, or in your chosen SDK wrapper.\n\n\n\n\n\n\n\n\nStep in Flow\n\n\nWhat it does\n\n\n\n\n\n\n\n\n\n\n1. SETUP\n\n\nSetups up the device\n\n\n\n\n\n\n2. DEVICE DISCOVERY\n\n\nDiscover devices that are broadcasting messages\n\n\n\n\n\n\n3. (CHOOSE MESSAGE)\n\n\nChoose the message, then use that information in the following steps\n\n\n\n\n\n\n4. INIT CONSUMER\n\n\nInitialises the device as a consumer\n\n\n\n\n\n\n5. REQUEST SERVICES\n\n\nRequest service messages from the device that is broadcasting, which lists what services it's offering\n\n\n\n\n\n\n6. GET SERVICE PRICES\n\n\nGet's the prices for the service you are interested in\n\n\n\n\n\n\n7. SELECT SERVICE\n\n\nSelects the service the device wants to consume\n\n\n\n\n\n\n8. MAKE PAYMENT\n\n\nMakes a payment for the service that is chosen\n\n\n\n\n\n\n9. BEGIN SERVICE DELIVERY\n\n\nStarts the process / flow to consume the service based on the service token received.\n\n\n\n\n\n\n10. STOP SERVICE DELIVERY\n\n\nCalled to tell the other thing that it has completed it's consumption of the service\n\n\n\n\n\n\n\n\nThe Producer flow\n\u00b6\n\n\nThe producer device should follow this flow. These steps should map to the interface either in Go, or in your chosen SDK wrapper.\n\n\n\n\n\n\n\n\nStep in Flow\n\n\nWhat it does\n\n\n\n\n\n\n\n\n\n\n1. SETUP\n\n\nSetups the device\n\n\n\n\n\n\n2A. ADD SERVICE\n\n\nAdds a service to the producer\n\n\n\n\n\n\n2B. REMOVE SERVICE\n\n\nRemoves a service from the producer\n\n\n\n\n\n\n3. INIT PRODUCER\n\n\nInitialises the producer\n\n\n\n\n\n\n4A. START BROADCAST\n\n\nStarts the producer broadcasting it's service message\n\n\n\n\n\n\n4B. STOP BROADCAST\n\n\nStops the producer from broadcasting it's service message\n\n\n\n\n\n\n\n\n2. Choose your SDK\n\u00b6\n\n\nFor the alpha release, we made the decision to go with four different wrappers. The documentation and API specification can be found here:\n\n\nGo to Java (Javadoc)\n \nGo to Python 2.7 doc\n \nGo to .net / C# doc\n \nGo to Node.js doc",
            "title": "Quick Start"
        },
        {
            "location": "/quick-start/#146-understand-the-recommended-flows",
            "text": "Before you get started, it's worth familiarising yourself with how Worldpay Within works. We'd recommend following the pre-established flows in the order they are presented for each Thing (Machine A and Machine B). If you stray from the flows, we cannot guarantee that the SDKs will work.  We recommend following the below flows for consumer and producer devices. You can find a breakdown in each of the  steps below.  The devices are not synchronised by the SDK, so you'll need to ensure that the SDKs call the Worldpay Within API in the correct order. If you follow the steps below, then the outcome should be as expected.",
            "title": "1. Understand the recommended flows"
        },
        {
            "location": "/quick-start/#worldpay-within-flow",
            "text": "The flows of the producer and consumer.",
            "title": "Worldpay Within flow"
        },
        {
            "location": "/quick-start/#the-consumer-flow",
            "text": "The consumer device should follow this flow. These steps should map to the interface either in Go, or in your chosen SDK wrapper.     Step in Flow  What it does      1. SETUP  Setups up the device    2. DEVICE DISCOVERY  Discover devices that are broadcasting messages    3. (CHOOSE MESSAGE)  Choose the message, then use that information in the following steps    4. INIT CONSUMER  Initialises the device as a consumer    5. REQUEST SERVICES  Request service messages from the device that is broadcasting, which lists what services it's offering    6. GET SERVICE PRICES  Get's the prices for the service you are interested in    7. SELECT SERVICE  Selects the service the device wants to consume    8. MAKE PAYMENT  Makes a payment for the service that is chosen    9. BEGIN SERVICE DELIVERY  Starts the process / flow to consume the service based on the service token received.    10. STOP SERVICE DELIVERY  Called to tell the other thing that it has completed it's consumption of the service",
            "title": "The Consumer flow"
        },
        {
            "location": "/quick-start/#the-producer-flow",
            "text": "The producer device should follow this flow. These steps should map to the interface either in Go, or in your chosen SDK wrapper.     Step in Flow  What it does      1. SETUP  Setups the device    2A. ADD SERVICE  Adds a service to the producer    2B. REMOVE SERVICE  Removes a service from the producer    3. INIT PRODUCER  Initialises the producer    4A. START BROADCAST  Starts the producer broadcasting it's service message    4B. STOP BROADCAST  Stops the producer from broadcasting it's service message",
            "title": "The Producer flow"
        },
        {
            "location": "/quick-start/#246-choose-your-sdk",
            "text": "For the alpha release, we made the decision to go with four different wrappers. The documentation and API specification can be found here:  Go to Java (Javadoc)   Go to Python 2.7 doc   Go to .net / C# doc   Go to Node.js doc",
            "title": "2. Choose your SDK"
        },
        {
            "location": "/sample-service-messaging/",
            "text": "Please note that this is a early reference guide, and has evolved since it was published, but in combination with the SDK code should give plenty of hints as to how to work with the SDK in a low level.\n\n\nService discovery messages\n\u00b6\n\n\nA reference application shall be built to prove the concepts and APIs outlined above. This reference application will be implemented on the current range of platforms aimed at providing IoT services. These boards are typically running \u2018M\u2019 class processors which as yet do not contain an SE. Currently only the application processors (A class such as A57 Cortex) contain SEs. However developments are being made in the IoT platform space, for example ARM has released a new M architecture with does contain an SE , although there will be delay before boards using these processors and compiler tools become mainstream. This document requires these more secure platforms to be available.\n\n\nService broadcast\n\u00b6\n\n\n{\n    \"DeviceDescription\": \"Worldpay Within Enabled Electric Car Charger\",\n    \"Hostname\": \"192.168.1.139\",\n    \"PortNumber\": 8800,\n    \"ServerID\": \"58d8f9fb-b3e9-45bc-b701-fcdd295bc265\",\n    \"UrlPrefix\": \"v1/carcharge\"\n}\n\n\n\n\n\nService list request\n\u00b6\n\n\nIn order to build the URL, use the hostname, with the port number, the url prefix all concatenated. The concatenate with \u201cservice/discover\u201d.\n\n\nhttp://192.168.1.139:8800/v1/carcharge/service/discover\n\n\n{\n}\n\n\n\n\n\nNote: body content empty, request is direct to server indicated in broadcast.\n\n\nService list response\n\u00b6\n\n\n{\n\"ServerID\": \"58d8f9fb-b3e9-45bc-b701-fcdd295bc265\",\n\"Services\": [\n    {\n        \"ServiceID\": 0,\n        \"ServiceDescription\": \"Car charging\"\n    },\n    {\n        \"ServiceID\": 1,\n        \"ServiceDescription\": \"Car parking\"\n    }\n]\n}\n\n\n\n\n\nService negotiation messages\n\u00b6\n\n\nService price request\n\u00b6\n\n\nIn order to build the URL, use the hostname, with the port number, the url prefix all concatenated. The concatenate with \u201cservice\u201d concatenated with \u201cservice ID\u201d and then \u201cprices\u201d.\n\n\nhttp://192.168.1.139:8800/v1/carcharge/service/0/prices\n\n\n{\n}\n\n\n\n\n\nNote: body content empty. URL includes the serviceID (i.e. 0) for the prices being requested, e.g. for serviceID 1, URL would be /v1/carcharge/service/1/prices)\n\n\nService price response\n\u00b6\n\n\n{\n    \"ServerID\" : \"58d8f9fb-b3e9-45bc-b701-fcdd295bc265\",\n    \"Prices\" : [{\n        \"ServiceID\" : 0,\n        \"PriceID\" : 0,\n        \"PricePerUnit\" : 140,\n        \"UnitID\" : 0,\n        \"UnitDescription\" : \"kW\",\n        \"PriceDescription\" : \"Slow (3.6kWh)\"\n    }, {\n        \"ServiceID\" : 0,\n        \"PriceID\" : 1,\n        \"PricePerUnit\" : 70,\n        \"UnitID\" : 0,\n        \"UnitDescription\" : \"kW\",\n        \"PriceDescription\" : \"Medium (7.2kWh)\"\n    }, {\n        \"ServiceID\" : 0,\n        \"PriceID\" : 2,\n        \"PricePerUnit\" : 10,\n        \"UnitID\" : 0,\n        \"UnitDescription\" : \"kW\",\n        \"PriceDescription\" : \"Super (120kWh)\"\n    }\n    ]\n}\n\n\n\n\n\nGet Total price request\n\u00b6\n\n\nIn order to build the URL, use the hostname, with the port number, the url prefix all concatenated. The concatenate with \u201cservice\u201d concatenated with \u201cservice ID\u201d and then \u201crequestTotal\u201d.\n\n\nhttp://192.168.1.139:8800/v1/carcharge/service/0/requestTotal\n\n\nContent: \n{\n    \"ClientID\":\"54560ba2-87c0-4172-a904-67a9b7a5e1ee\",\n    \"SelectedNumberOfUnits\":8,\n    \"SelectedPriceID\":1\n}\n\n\n\n\n\nGet Total price response\n\u00b6\n\n\n{\n    \"ServerID\": \"58d8f9fb-b3e9-45bc-b701-fcdd295bc265\",\n    \"ClientID\": \"54560ba2-87c0-4172-a904-67a9b7a5e1ee\",\n    \"PriceID\": 1,\n    \"UnitsToSupply\": 8,\n    \"TotalPrice\": 560,\n    \"PaymentReferenceID\": \"e7c18800-706d-4f0c-933c-19f8d5be72da\",\n    \"MerchantClientKey\": \" T_C_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx \"\n}\n\n\n\n\n\nToken request for Online.worldpay.com\n\u00b6\n\n\nHTTP POST to \nhttps://api.worldpay.com/v1/tokens\n. No custom HTTP headers used.\n\n\n{\n    \"clientKey\" : \"T_C_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n    \"paymentMethod\" : {\n        \"cardNumber\" : \"1234567890124444\",\n        \"expiryMonth\" : 2,\n        \"expiryYear\" : 2021,\n        \"name\" : \"Bilbo Baggins\",\n        \"type\" : \"Card\"\n    },\n    \"reusable\" : false\n}\n\n\n\n\n\nToken response content from Online.worldpay.com\n\u00b6\n\n\n{\n    \"token\": \"TEST_SU_yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy\",\n    \"paymentMethod\": {\n        \"type\": \"ObfuscatedCard\",\n        \"name\": \"Bilbo Baggins\",\n        \"expiryMonth\": 2,\n        \"expiryYear\": 2021,\n        \"cardType\": \"MASTERCARD_CREDIT\",\n        \"maskedCardNumber\": \"**** **** **** 4444\",\n        \"cardSchemeType\": \"consumer\",\n        \"cardSchemeName\": \"MCI CREDIT\",\n        \"cardIssuer\": \"LLOYDS BANK PLC\",\n        \"countryCode\": \"GB\",\n        \"cardClass\": \"credit\",\n        \"cardProductTypeDescNonContactless\": \"MasterCard Business\",\n        \"cardProductTypeDescContactless\": \"CL MasterCard Bus\",\n        \"prepaid\": \"unknown\"\n    },\n    \"reusable\": false\n}\n\n\n\n\n\nPayment request\n\u00b6\n\n\nHTTP POST to \nhttp://192.168.1.139:8800/v1/carcharge/payment\n\n\n{\n    \"ClientID\" : \"54560ba2-87c0-4172-a904-67a9b7a5e1ee\",\n    \"ClientToken\" : \"TEST_SU_yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy \",\n    \"PaymentReferenceID\" : \"e7c18800-706d-4f0c-933c-19f8d5be72da\"\n}\n\n\n\n\n\nOrder request for Online.worldpay.com\n\u00b6\n\n\nHTTP POST to \nhttps://api.worldpay.com/v1/orders\n. HTTP header includes the Merchant's Service Key (Private)\n\n\n{\n    \"amount\" : 560,\n    \"currencyCode\" : \"GBP\",\n    \"customerOrderCode\" : \"Car charge (8kW @ Medium (7.2kWh)) - 26\\/01\\/2016 15:40\",\n    \"orderDescription\" : \"Car charging payment\",\n    \"token\" : \"TEST_SU_yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy \"\n}\n\n\n\n\n\nOrder response content from Online.worldpay.com\n\u00b6\n\n\n{\n    \"orderCode\" : \"4d22cb5d-5dfb-43ce-9108-dfe230151429\",\n    \"token\" : \"TEST_SU_yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy \",\n    \"orderDescription\" : \"Car charging payment\",\n    \"amount\" : 560,\n    \"currencyCode\" : \"GBP\",\n    \"paymentStatus\" : \"SUCCESS\",\n    \"paymentResponse\" : {\n        \"type\" : \"ObfuscatedCard\",\n        \"name\" : \"Bilbo Baggins\",\n        \"expiryMonth\" : 2,\n        \"expiryYear\" : 2021,\n        \"cardType\" : \"MASTERCARD_CREDIT\",\n        \"maskedCardNumber\" : \"**** **** **** 4444\",\n        \"cardSchemeType\" : \"consumer\",\n        \"cardSchemeName\" : \"MCI CREDIT\",\n        \"cardIssuer\" : \"LLOYDS BANK PLC\",\n        \"countryCode\" : \"GB\",\n        \"cardClass\" : \"credit\",\n        \"cardProductTypeDescNonContactless\" : \"MasterCard Business\",\n        \"cardProductTypeDescContactless\" : \"CL MasterCard Bus\",\n        \"prepaid\" : \"unknown\"\n    },\n    \"customerOrderCode\" : \"Car charge (8kW @ Medium (7.2kWh)) - 26/01/2016 15:40\",\n    \"environment\" : \"TEST\",\n    \"riskScore\" : {\n        \"value\" : \"1\"\n    }\n}\n\n\n\n\n\nPayment request response\n\u00b6\n\n\n{\n    \"ServerID\" : \"58d8f9fb-b3e9-45bc-b701-fcdd295bc265\",\n    \"ClientID\" : \"54560ba2-87c0-4172-a904-67a9b7a5e1ee\",\n    \"TotalPaid\" : 0,\n    \"ServiceDeliveryToken\" : \"3e7b4c25-157d-4b47-999c-e4faba086590\",\n    \"client-uuid\":\"719D329B-8909-4A8B-B352-E449C3132074\"\n}\n\n\n\n\n\nBegin Service Delivery request\n\u00b6\n\n\nHTTP POST to \nhttp://192.168.1.139:8800/v1/carcharge/service/0/delivery/begin\n\n\nURL encodes the serviceID being requested\n\n\n{\n    \"ClientID\" : \"54560ba2-87c0-4172-a904-67a9b7a5e1ee\",\n    \"ServiceDeliveryToken\" : \"3e7b4c25-157d-4b47-999c-e4faba086590\",\n    \"UnitsToSupply\" : 8\n}\n\n\n\n\n\nBegin Service Delivery response content:\n\u00b6\n\n\n{\n    \"ServerID\" : \"58d8f9fb-b3e9-45bc-b701-fcdd295bc265\",\n    \"ClientID\" : \"54560ba2-87c0-4172-a904-67a9b7a5e1ee\",\n    \"ServiceDeliveryToken\" : \"3e7b4c25-157d-4b47-999c-e4faba086590\",\n    \"UnitsToSupply\" : 8\n}\n\n\n\n\n\nEnd Service Delivery request\n\u00b6\n\n\nHTTP POST to \nhttp://192.168.1.139:8800/v1/carcharge/service/0/delivery/end\n)\n\n\nURL encodes the serviceID being requested\n\n\n{\n    \"ClientID\" : \"54560ba2-87c0-4172-a904-67a9b7a5e1ee\",\n    \"ServiceDeliveryToken\" : \"3e7b4c25-157d-4b47-999c-e4faba086590\",\n    \"UnitsReceived\" : 8\n}\n\n\n\n\n\nEnd Service Delivery response content\n\u00b6\n\n\n{\n    \"ServerID\" : \"58d8f9fb-b3e9-45bc-b701-fcdd295bc265\",\n    \"ClientID\" : \"54560ba2-87c0-4172-a904-67a9b7a5e1ee\",\n    \"ServiceDeliveryToken\" : \"3e7b4c25-157d-4b47-999c-e4faba086590\",\n    \"UnitsJustSupplied\" : 8,\n    \"UnitsRemaining\" : 0\n}",
            "title": "Sample Service Messaging"
        },
        {
            "location": "/sample-service-messaging/#service-discovery-messages",
            "text": "A reference application shall be built to prove the concepts and APIs outlined above. This reference application will be implemented on the current range of platforms aimed at providing IoT services. These boards are typically running \u2018M\u2019 class processors which as yet do not contain an SE. Currently only the application processors (A class such as A57 Cortex) contain SEs. However developments are being made in the IoT platform space, for example ARM has released a new M architecture with does contain an SE , although there will be delay before boards using these processors and compiler tools become mainstream. This document requires these more secure platforms to be available.",
            "title": "Service discovery messages"
        },
        {
            "location": "/sample-service-messaging/#service-broadcast",
            "text": "{\n    \"DeviceDescription\": \"Worldpay Within Enabled Electric Car Charger\",\n    \"Hostname\": \"192.168.1.139\",\n    \"PortNumber\": 8800,\n    \"ServerID\": \"58d8f9fb-b3e9-45bc-b701-fcdd295bc265\",\n    \"UrlPrefix\": \"v1/carcharge\"\n}",
            "title": "Service broadcast"
        },
        {
            "location": "/sample-service-messaging/#service-list-request",
            "text": "In order to build the URL, use the hostname, with the port number, the url prefix all concatenated. The concatenate with \u201cservice/discover\u201d.  http://192.168.1.139:8800/v1/carcharge/service/discover  {\n}  Note: body content empty, request is direct to server indicated in broadcast.",
            "title": "Service list request"
        },
        {
            "location": "/sample-service-messaging/#service-list-response",
            "text": "{\n\"ServerID\": \"58d8f9fb-b3e9-45bc-b701-fcdd295bc265\",\n\"Services\": [\n    {\n        \"ServiceID\": 0,\n        \"ServiceDescription\": \"Car charging\"\n    },\n    {\n        \"ServiceID\": 1,\n        \"ServiceDescription\": \"Car parking\"\n    }\n]\n}",
            "title": "Service list response"
        },
        {
            "location": "/sample-service-messaging/#service-negotiation-messages",
            "text": "",
            "title": "Service negotiation messages"
        },
        {
            "location": "/sample-service-messaging/#service-price-request",
            "text": "In order to build the URL, use the hostname, with the port number, the url prefix all concatenated. The concatenate with \u201cservice\u201d concatenated with \u201cservice ID\u201d and then \u201cprices\u201d.  http://192.168.1.139:8800/v1/carcharge/service/0/prices  {\n}  Note: body content empty. URL includes the serviceID (i.e. 0) for the prices being requested, e.g. for serviceID 1, URL would be /v1/carcharge/service/1/prices)",
            "title": "Service price request"
        },
        {
            "location": "/sample-service-messaging/#service-price-response",
            "text": "{\n    \"ServerID\" : \"58d8f9fb-b3e9-45bc-b701-fcdd295bc265\",\n    \"Prices\" : [{\n        \"ServiceID\" : 0,\n        \"PriceID\" : 0,\n        \"PricePerUnit\" : 140,\n        \"UnitID\" : 0,\n        \"UnitDescription\" : \"kW\",\n        \"PriceDescription\" : \"Slow (3.6kWh)\"\n    }, {\n        \"ServiceID\" : 0,\n        \"PriceID\" : 1,\n        \"PricePerUnit\" : 70,\n        \"UnitID\" : 0,\n        \"UnitDescription\" : \"kW\",\n        \"PriceDescription\" : \"Medium (7.2kWh)\"\n    }, {\n        \"ServiceID\" : 0,\n        \"PriceID\" : 2,\n        \"PricePerUnit\" : 10,\n        \"UnitID\" : 0,\n        \"UnitDescription\" : \"kW\",\n        \"PriceDescription\" : \"Super (120kWh)\"\n    }\n    ]\n}",
            "title": "Service price response"
        },
        {
            "location": "/sample-service-messaging/#get-total-price-request",
            "text": "In order to build the URL, use the hostname, with the port number, the url prefix all concatenated. The concatenate with \u201cservice\u201d concatenated with \u201cservice ID\u201d and then \u201crequestTotal\u201d.  http://192.168.1.139:8800/v1/carcharge/service/0/requestTotal  Content: \n{\n    \"ClientID\":\"54560ba2-87c0-4172-a904-67a9b7a5e1ee\",\n    \"SelectedNumberOfUnits\":8,\n    \"SelectedPriceID\":1\n}",
            "title": "Get Total price request"
        },
        {
            "location": "/sample-service-messaging/#get-total-price-response",
            "text": "{\n    \"ServerID\": \"58d8f9fb-b3e9-45bc-b701-fcdd295bc265\",\n    \"ClientID\": \"54560ba2-87c0-4172-a904-67a9b7a5e1ee\",\n    \"PriceID\": 1,\n    \"UnitsToSupply\": 8,\n    \"TotalPrice\": 560,\n    \"PaymentReferenceID\": \"e7c18800-706d-4f0c-933c-19f8d5be72da\",\n    \"MerchantClientKey\": \" T_C_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx \"\n}",
            "title": "Get Total price response"
        },
        {
            "location": "/sample-service-messaging/#token-request-for-onlineworldpaycom",
            "text": "HTTP POST to  https://api.worldpay.com/v1/tokens . No custom HTTP headers used.  {\n    \"clientKey\" : \"T_C_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n    \"paymentMethod\" : {\n        \"cardNumber\" : \"1234567890124444\",\n        \"expiryMonth\" : 2,\n        \"expiryYear\" : 2021,\n        \"name\" : \"Bilbo Baggins\",\n        \"type\" : \"Card\"\n    },\n    \"reusable\" : false\n}",
            "title": "Token request for Online.worldpay.com"
        },
        {
            "location": "/sample-service-messaging/#token-response-content-from-onlineworldpaycom",
            "text": "{\n    \"token\": \"TEST_SU_yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy\",\n    \"paymentMethod\": {\n        \"type\": \"ObfuscatedCard\",\n        \"name\": \"Bilbo Baggins\",\n        \"expiryMonth\": 2,\n        \"expiryYear\": 2021,\n        \"cardType\": \"MASTERCARD_CREDIT\",\n        \"maskedCardNumber\": \"**** **** **** 4444\",\n        \"cardSchemeType\": \"consumer\",\n        \"cardSchemeName\": \"MCI CREDIT\",\n        \"cardIssuer\": \"LLOYDS BANK PLC\",\n        \"countryCode\": \"GB\",\n        \"cardClass\": \"credit\",\n        \"cardProductTypeDescNonContactless\": \"MasterCard Business\",\n        \"cardProductTypeDescContactless\": \"CL MasterCard Bus\",\n        \"prepaid\": \"unknown\"\n    },\n    \"reusable\": false\n}",
            "title": "Token response content from Online.worldpay.com"
        },
        {
            "location": "/sample-service-messaging/#payment-request",
            "text": "HTTP POST to  http://192.168.1.139:8800/v1/carcharge/payment  {\n    \"ClientID\" : \"54560ba2-87c0-4172-a904-67a9b7a5e1ee\",\n    \"ClientToken\" : \"TEST_SU_yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy \",\n    \"PaymentReferenceID\" : \"e7c18800-706d-4f0c-933c-19f8d5be72da\"\n}",
            "title": "Payment request"
        },
        {
            "location": "/sample-service-messaging/#order-request-for-onlineworldpaycom",
            "text": "HTTP POST to  https://api.worldpay.com/v1/orders . HTTP header includes the Merchant's Service Key (Private)  {\n    \"amount\" : 560,\n    \"currencyCode\" : \"GBP\",\n    \"customerOrderCode\" : \"Car charge (8kW @ Medium (7.2kWh)) - 26\\/01\\/2016 15:40\",\n    \"orderDescription\" : \"Car charging payment\",\n    \"token\" : \"TEST_SU_yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy \"\n}",
            "title": "Order request for Online.worldpay.com"
        },
        {
            "location": "/sample-service-messaging/#order-response-content-from-onlineworldpaycom",
            "text": "{\n    \"orderCode\" : \"4d22cb5d-5dfb-43ce-9108-dfe230151429\",\n    \"token\" : \"TEST_SU_yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy \",\n    \"orderDescription\" : \"Car charging payment\",\n    \"amount\" : 560,\n    \"currencyCode\" : \"GBP\",\n    \"paymentStatus\" : \"SUCCESS\",\n    \"paymentResponse\" : {\n        \"type\" : \"ObfuscatedCard\",\n        \"name\" : \"Bilbo Baggins\",\n        \"expiryMonth\" : 2,\n        \"expiryYear\" : 2021,\n        \"cardType\" : \"MASTERCARD_CREDIT\",\n        \"maskedCardNumber\" : \"**** **** **** 4444\",\n        \"cardSchemeType\" : \"consumer\",\n        \"cardSchemeName\" : \"MCI CREDIT\",\n        \"cardIssuer\" : \"LLOYDS BANK PLC\",\n        \"countryCode\" : \"GB\",\n        \"cardClass\" : \"credit\",\n        \"cardProductTypeDescNonContactless\" : \"MasterCard Business\",\n        \"cardProductTypeDescContactless\" : \"CL MasterCard Bus\",\n        \"prepaid\" : \"unknown\"\n    },\n    \"customerOrderCode\" : \"Car charge (8kW @ Medium (7.2kWh)) - 26/01/2016 15:40\",\n    \"environment\" : \"TEST\",\n    \"riskScore\" : {\n        \"value\" : \"1\"\n    }\n}",
            "title": "Order response content from Online.worldpay.com"
        },
        {
            "location": "/sample-service-messaging/#payment-request-response",
            "text": "{\n    \"ServerID\" : \"58d8f9fb-b3e9-45bc-b701-fcdd295bc265\",\n    \"ClientID\" : \"54560ba2-87c0-4172-a904-67a9b7a5e1ee\",\n    \"TotalPaid\" : 0,\n    \"ServiceDeliveryToken\" : \"3e7b4c25-157d-4b47-999c-e4faba086590\",\n    \"client-uuid\":\"719D329B-8909-4A8B-B352-E449C3132074\"\n}",
            "title": "Payment request response"
        },
        {
            "location": "/sample-service-messaging/#begin-service-delivery-request",
            "text": "HTTP POST to  http://192.168.1.139:8800/v1/carcharge/service/0/delivery/begin  URL encodes the serviceID being requested  {\n    \"ClientID\" : \"54560ba2-87c0-4172-a904-67a9b7a5e1ee\",\n    \"ServiceDeliveryToken\" : \"3e7b4c25-157d-4b47-999c-e4faba086590\",\n    \"UnitsToSupply\" : 8\n}",
            "title": "Begin Service Delivery request"
        },
        {
            "location": "/sample-service-messaging/#begin-service-delivery-response-content",
            "text": "{\n    \"ServerID\" : \"58d8f9fb-b3e9-45bc-b701-fcdd295bc265\",\n    \"ClientID\" : \"54560ba2-87c0-4172-a904-67a9b7a5e1ee\",\n    \"ServiceDeliveryToken\" : \"3e7b4c25-157d-4b47-999c-e4faba086590\",\n    \"UnitsToSupply\" : 8\n}",
            "title": "Begin Service Delivery response content:"
        },
        {
            "location": "/sample-service-messaging/#end-service-delivery-request",
            "text": "HTTP POST to  http://192.168.1.139:8800/v1/carcharge/service/0/delivery/end )  URL encodes the serviceID being requested  {\n    \"ClientID\" : \"54560ba2-87c0-4172-a904-67a9b7a5e1ee\",\n    \"ServiceDeliveryToken\" : \"3e7b4c25-157d-4b47-999c-e4faba086590\",\n    \"UnitsReceived\" : 8\n}",
            "title": "End Service Delivery request"
        },
        {
            "location": "/sample-service-messaging/#end-service-delivery-response-content",
            "text": "{\n    \"ServerID\" : \"58d8f9fb-b3e9-45bc-b701-fcdd295bc265\",\n    \"ClientID\" : \"54560ba2-87c0-4172-a904-67a9b7a5e1ee\",\n    \"ServiceDeliveryToken\" : \"3e7b4c25-157d-4b47-999c-e4faba086590\",\n    \"UnitsJustSupplied\" : 8,\n    \"UnitsRemaining\" : 0\n}",
            "title": "End Service Delivery response content"
        },
        {
            "location": "/dotnet/",
            "text": ".NET Worldpay Within wrapper\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nThe .NET Worldpay Within wrapper provides a convenient entry point for application developers who wish to create applications using the Worldpay Within toolkit.\n\n\nCurrently, this is built against .NET Framework 4.5.2, however I intend to make this available for use in portable DLLs (to work on Android, iOS) as well as .NET Core, so it can be easily used from Linux and Mac-based operating systems as well.\n\n\nPrerequisites\n\u00b6\n\n\nThis has been created and built using Microsoft Visual Studio 2015 Community Edition.\n\n\nBuilding\n\u00b6\n\n\nSkip this if you just want to use the pre-built DLLs for using Worldpay Within.\n\n\nUse nuget to acquire the 0.9.3 Apache Thrift libraries using the following command from the nugen package console:\n\n\nInstall-Package ApacheThrift -Version 0.9.3\n\n\nIf you don't specify the version, as of 16/6/15 you'll get an old version which will result in missing type errors (e.g. \n'TProtocol' does not contain a definition for 'IncrementRecursionDepth'\n).\n\n\nWorldpay.Within.Rpc\n\u00b6\n\n\nThis project contains nothing but the generated RPC wrappers for Thrift.\n\n\nYou can rebuild this code by running:\n\n\nthrift-0.9.3.exe -r -out %GOPATH%\\src\\innovation.worldpay.com\\worldpay-within-sdk\\wrappers\\dotnet\\Worldpay.Within\\Worldpay.Within.Rpc --gen csharp:nullable,union %GOPATH%\\src\\innovation.worldpay.com\\worldpay-within-sdk\\rpc\\wpwithin.thrift\n\n\n\n\nThe -r is there just for safety, in case subdirectories are used in future for storing dependent Thrift IDL files.\n\n\n\n\nNote, the full set of options for the Thrift compiler are as follows (we might want to use this later, holding off for now in the name of simplicity):\n\n\nasync:           Adds Async support using Task.Run.\nasyncctp:        Adds Async CTP support using TaskEx.Run.\nwcf:             Adds bindings for WCF to generated classes.\nserial:          Add serialization support to generated classes.\nnullable:        Use nullable types for properties.\nhashcode:        Generate a hashcode and equals implementation for classes.\nunion:           Use new union typing, which includes a static read function for union types.\n\n\n\n\n\nBe sure to refresh the project source tree in Visual Studio to ensure that any newly generated files are included in the project. If you fail to do this, expect compile errors for missing types to be thrown.\n\n\nUsing\n\u00b6\n\n\nTo use Worldpay Within, add the following DLLs to your project path:\n\n\n\n\nWorldpay.Within.dll\n - this contains the wrapper code and Apache Thrift generated C# wrapper code.\n\n\nThrift.dll\n - Apache Thrift library.\n\n\nLogging Framework\n - whatever logging framework we're going to use.",
            "title": ".NET"
        },
        {
            "location": "/dotnet/#net-worldpay-within-wrapper",
            "text": "",
            "title": ".NET Worldpay Within wrapper"
        },
        {
            "location": "/dotnet/#introduction",
            "text": "The .NET Worldpay Within wrapper provides a convenient entry point for application developers who wish to create applications using the Worldpay Within toolkit.  Currently, this is built against .NET Framework 4.5.2, however I intend to make this available for use in portable DLLs (to work on Android, iOS) as well as .NET Core, so it can be easily used from Linux and Mac-based operating systems as well.",
            "title": "Introduction"
        },
        {
            "location": "/dotnet/#prerequisites",
            "text": "This has been created and built using Microsoft Visual Studio 2015 Community Edition.",
            "title": "Prerequisites"
        },
        {
            "location": "/dotnet/#building",
            "text": "Skip this if you just want to use the pre-built DLLs for using Worldpay Within.  Use nuget to acquire the 0.9.3 Apache Thrift libraries using the following command from the nugen package console:  Install-Package ApacheThrift -Version 0.9.3  If you don't specify the version, as of 16/6/15 you'll get an old version which will result in missing type errors (e.g.  'TProtocol' does not contain a definition for 'IncrementRecursionDepth' ).",
            "title": "Building"
        },
        {
            "location": "/dotnet/#worldpaywithinrpc",
            "text": "This project contains nothing but the generated RPC wrappers for Thrift.  You can rebuild this code by running:  thrift-0.9.3.exe -r -out %GOPATH%\\src\\innovation.worldpay.com\\worldpay-within-sdk\\wrappers\\dotnet\\Worldpay.Within\\Worldpay.Within.Rpc --gen csharp:nullable,union %GOPATH%\\src\\innovation.worldpay.com\\worldpay-within-sdk\\rpc\\wpwithin.thrift   The -r is there just for safety, in case subdirectories are used in future for storing dependent Thrift IDL files.   Note, the full set of options for the Thrift compiler are as follows (we might want to use this later, holding off for now in the name of simplicity):  async:           Adds Async support using Task.Run.\nasyncctp:        Adds Async CTP support using TaskEx.Run.\nwcf:             Adds bindings for WCF to generated classes.\nserial:          Add serialization support to generated classes.\nnullable:        Use nullable types for properties.\nhashcode:        Generate a hashcode and equals implementation for classes.\nunion:           Use new union typing, which includes a static read function for union types.  Be sure to refresh the project source tree in Visual Studio to ensure that any newly generated files are included in the project. If you fail to do this, expect compile errors for missing types to be thrown.",
            "title": "Worldpay.Within.Rpc"
        },
        {
            "location": "/dotnet/#using",
            "text": "To use Worldpay Within, add the following DLLs to your project path:   Worldpay.Within.dll  - this contains the wrapper code and Apache Thrift generated C# wrapper code.  Thrift.dll  - Apache Thrift library.  Logging Framework  - whatever logging framework we're going to use.",
            "title": "Using"
        },
        {
            "location": "/getting-started-with-go/",
            "text": "Getting started\n\u00b6\n\n\nYou will at the very least need to install Go and the Golang SDK, thereafter you can code against the raw Go SDK or alternatively against one of the multiple language wrappers, which give access to the SDK. The Golang SDK communicates with these other languages using RPC calls (in both directions), and the wrappers in the background interface using Thrift, this is not exposed to you as a developer, you work with the Interface layer in your language of choice.\n\n\nThe binaries (if you don't want to build from source)\n\u00b6\n\n\nPlease see the releases section of GitHub for access to pre-built binaries of the RPC Agent and Dev Client apps. Both of the apps have been built for 32bit and 64bit architectures on Windows, MacOS, Linux and Linux (ARM).\n\n\nWhile the RPC Agent can be run from anywhere it makes sense to add it to the directory of the application which will call it. The reason for this is that each application needs it own running instance of the RPC Agent and it can easily get confusing when there are multiple applications and agents deployed.\n\n\nPlease see the examples in both the Java and Node.JS wrappers. these examples currently hold binaries for MacOS x64. I suggest replacing that binary with an alternate build, if required.\n\n\nThe dev client can really be run from anywhere as it is not coupled with anything else.\n\n\nUsage\n\u00b6\n\n\n\n\nRPC Agent \n./rpc-agent -configfile <filename></filename>\n. Please see explanation of rpc-agent config file for further info.*   Dev Client \n./dev-client\n\n\n\n\nInstall - if you want to go from the Go source files!\n\u00b6\n\n\n\n\nInstall Go command line\n\n\nSet up the environmental variables correctly; you only need to set $GOPATH, and that should be set as //, where is wherever you want the code, is /src/innovation.worldpay.com\n\n\nclone the repo to $GOPATH/src/innovation.worldpay.com\n\n\nGet the dependencies; go get github.com/Sirupsen/logrus\n\n\nGet the dependencies; go get github.com/gorilla/mux\n\n\nGet the dependencies; go get github.com/nu7hatch/gouuid\n\n\nGet the dependencies; go get git.apache.org/thrift.git/lib/go/thrift\n\n\n\n\nConfiguration file versus command line flags\n\u00b6\n\n\nThe RPC client takes command line flags e.g. -port 9091 but it can also take the flag -configfile 'conf.json' so you can specify the configuration in a config file. For example:\n\n\n{\n    \"WorldpayWithinConfig\": {\n        \"BufferSize\" : 100,\n        \"Buffered\": false,\n        \"Framed\": false,\n        \"Host\": \"127.0.0.1\",\n        \"Logfile\": \"worldpayWithin.log\",\n        \"Loglevel\": \"warn\",\n        \"Port\": 9081,\n        \"Protocol\": \"binary\",\n        \"Secure\": false\n    }\n}\n\n\n\n\n\nTutorial on running two example apps on one machine\n\u00b6\n\n\nTutorial for running on the same machine e.g. Java (producer) and Node.js (consumer)\n\n\n\n\nThe output of the log files for the orchestration of the flow.\n\n\n\n\nShowing the payment in online.worldpay.com.\n\n\n\n\nJava - 9090 - Producer\n\n\n\n\nNode.js - 9091 - consumer\n\n\n\n\n\n\nEach app needs to run on it's own instance of the RPC service, so run one on 9090 and the other on 9091\n\n\n\n\nSo we're running Java off of 9090 and running node.js off of 9091\n\n\nOpen two terminal windows\n\n\nConfigure the rpc agent in each terminal window to run on each of the ports, in the producer window run the RPC on port 9090 and the consumer window run the RPC on port 9091\n\n\nConfigure the java app to run on 9090 (run as the producer)\n\n\nConfigure the node.js app to run on 9091 - in createClient in example code (run as the consumer)\n\n\nRun the java producer app so we're broadcasting, note that the RPC agent broadcasting will continue to run in the background whilst the java program has exited\n\n\nRun the node.js consumer app immediately\n\n\nThe service discovery, price negotiation, payment and service release flows will all be twiggered, as you can see below",
            "title": "Go"
        },
        {
            "location": "/getting-started-with-go/#getting-started",
            "text": "You will at the very least need to install Go and the Golang SDK, thereafter you can code against the raw Go SDK or alternatively against one of the multiple language wrappers, which give access to the SDK. The Golang SDK communicates with these other languages using RPC calls (in both directions), and the wrappers in the background interface using Thrift, this is not exposed to you as a developer, you work with the Interface layer in your language of choice.",
            "title": "Getting started"
        },
        {
            "location": "/getting-started-with-go/#the-binaries-if-you-dont-want-to-build-from-source",
            "text": "Please see the releases section of GitHub for access to pre-built binaries of the RPC Agent and Dev Client apps. Both of the apps have been built for 32bit and 64bit architectures on Windows, MacOS, Linux and Linux (ARM).  While the RPC Agent can be run from anywhere it makes sense to add it to the directory of the application which will call it. The reason for this is that each application needs it own running instance of the RPC Agent and it can easily get confusing when there are multiple applications and agents deployed.  Please see the examples in both the Java and Node.JS wrappers. these examples currently hold binaries for MacOS x64. I suggest replacing that binary with an alternate build, if required.  The dev client can really be run from anywhere as it is not coupled with anything else.",
            "title": "The binaries (if you don't want to build from source)"
        },
        {
            "location": "/getting-started-with-go/#usage",
            "text": "RPC Agent  ./rpc-agent -configfile <filename></filename> . Please see explanation of rpc-agent config file for further info.*   Dev Client  ./dev-client",
            "title": "Usage"
        },
        {
            "location": "/getting-started-with-go/#install-if-you-want-to-go-from-the-go-source-files",
            "text": "Install Go command line  Set up the environmental variables correctly; you only need to set $GOPATH, and that should be set as //, where is wherever you want the code, is /src/innovation.worldpay.com  clone the repo to $GOPATH/src/innovation.worldpay.com  Get the dependencies; go get github.com/Sirupsen/logrus  Get the dependencies; go get github.com/gorilla/mux  Get the dependencies; go get github.com/nu7hatch/gouuid  Get the dependencies; go get git.apache.org/thrift.git/lib/go/thrift",
            "title": "Install - if you want to go from the Go source files!"
        },
        {
            "location": "/getting-started-with-go/#configuration-file-versus-command-line-flags",
            "text": "The RPC client takes command line flags e.g. -port 9091 but it can also take the flag -configfile 'conf.json' so you can specify the configuration in a config file. For example:  {\n    \"WorldpayWithinConfig\": {\n        \"BufferSize\" : 100,\n        \"Buffered\": false,\n        \"Framed\": false,\n        \"Host\": \"127.0.0.1\",\n        \"Logfile\": \"worldpayWithin.log\",\n        \"Loglevel\": \"warn\",\n        \"Port\": 9081,\n        \"Protocol\": \"binary\",\n        \"Secure\": false\n    }\n}",
            "title": "Configuration file versus command line flags"
        },
        {
            "location": "/getting-started-with-go/#tutorial-on-running-two-example-apps-on-one-machine",
            "text": "Tutorial for running on the same machine e.g. Java (producer) and Node.js (consumer)   The output of the log files for the orchestration of the flow.   Showing the payment in online.worldpay.com.   Java - 9090 - Producer   Node.js - 9091 - consumer    Each app needs to run on it's own instance of the RPC service, so run one on 9090 and the other on 9091   So we're running Java off of 9090 and running node.js off of 9091  Open two terminal windows  Configure the rpc agent in each terminal window to run on each of the ports, in the producer window run the RPC on port 9090 and the consumer window run the RPC on port 9091  Configure the java app to run on 9090 (run as the producer)  Configure the node.js app to run on 9091 - in createClient in example code (run as the consumer)  Run the java producer app so we're broadcasting, note that the RPC agent broadcasting will continue to run in the background whilst the java program has exited  Run the node.js consumer app immediately  The service discovery, price negotiation, payment and service release flows will all be twiggered, as you can see below",
            "title": "Tutorial on running two example apps on one machine"
        },
        {
            "location": "/nodejs/",
            "text": "Node.js Software Development Kit (SDK)\n\u00b6\n\n\nPrerequisites\n\u00b6\n\n\n\n\nBefore you get started, you should have \nNode.js\n installed on your system. We've tested this wrapper with version 6.11.1.\n\n\nYou should also have \nnpm\n installed on your machine too.\n\n\nYou should create an account with \nWorldpay Online\n so that you're able to generate your own test API key. You'll replace the Worldpay test keys with your own in the SDK. \nWarning: Make sure you only use test API keys.\n\n\n\n\nGet started\n\u00b6\n\n\nOnce you've got Node.js and npm.js, you should be good to go.\n\n\n\n\nClone or download \nthe repository\n.\n\n\nChange to the folder \ncd wpw-sdk-nodejs\n (if using linux / unix).\n\n\nRun the following command: \nnpm install thrift sleep\n.\n\n    Note: If you are using a different package manager than npm, please adjust the command accordingly.\n\n    (If there are issues about access rights, add sudo in front of the above command)\n\n\n\n\nRun the examples\n\u00b6\n\n\nOnce you've got the repository and have changed to the right folder, you can start testing to see if it works. We'd recommend using your own test API keys for this. We've left our ones in the code, but you won't be able to see the payments with our keys.\n\n\n\n\nIn one terminal / cmd (or on one device) run: \nnode example-producer-callbacks.js\n.\n\n    (You can run \nnode example-producer.js\n but this does not recall the producer, once it times out)\n\n\nIn another terminal / cmd, (or on another device, on the same network) run: \nnode example-consumer.js\n.\n\n\nA payment should happen. If you see the serviceDeliveryToken returned within the producer terminal/cmd, you will know that the payment was complete.\n\n\n\n\nSee the payments\n\u00b6\n\n\nOnce the devices have successfully communicated with each other to make a payment, you'll want to check to make sure that your devices are successfully making and receiving payments.\n\n\nIf you used your own test API keys\n\u00b6\n\n\n\n\nLogin to \nWorldpay Online\n.\n\n\nYou'll see your dashboard. Scroll down and you should see the payment within your \nRecent Orders\n.\n\n\n\n\nIf you've used Worldpay's own test API keys\n\u00b6\n\n\n\n\nLogin to \nWorldpay Online\n.\n\n\nGot to \nSettings > API keys\n and get your test keys.\n\n\nReplace the keys in the producer files.\n\n\nRe-run the examples and you should see the payments coming through on the Worldpay Online payments dashboard.\n\n\n\n\nDebugging\n\u00b6\n\n\nIf you get some odd error messages talking about a 'rpc-agent':\n\n\n\n\nTry typing the following command: 'ps -e | grep rpc' to get the pid(s) of rpc-agents that are running.\n\n\nThen do kill \n e.g. kill 13249234 to kill these processes.\n\n\nTry re-running the examples\n\n\n\n\nIf you're still having trouble, you can contact us at \nInnovation@Worldpay.com\n or reach out to us on our \nSlack channel\n. Alternatively, you can \nraise an issue in GitHub\n.\n\n\nSo what's happening?\n\u00b6\n\n\n\n\nThe Worldpay Within Flows sequence diagram\n\n\nYou can see there are four phases; \nDiscover\n, \nNegotiation\n, \nPayment\n, and \nService delivery\n. For more information, see \nWorldpay Within\n.\n\n\nWhat IoT devices can I run this on?\n\u00b6\n\n\nHopefully any. We've only tested this on RPi - Raspberry Pis at the moment, but we welcome experiments on all other kinds of devices! Note that they will need to be on the same network - and that network should allow for UDP broadcast traffic. Most mobile hotspots allow this; a lot of corporate networks do not...\n\n\nWant to contribute?\n\u00b6\n\n\nIf you want to contribute, clone the repository and create a branch. Once you've made your changes, create a pull request. We'll review your code, and if accepted it will be merged into the code base. It's worth checkout out the \nInternal Structure of Worldpay Within\n and \nSample Service Messaging\n pages if you want to learn more about how Worldpay Within works.\n\n\nYou can also \nraise an issue in GitHub\n, or contact us directly at \nInnovation@Worldpay.com\n. You can also reach out to us on our \nSlack channel\n.",
            "title": "Node.js"
        },
        {
            "location": "/nodejs/#nodejs-software-development-kit-sdk",
            "text": "",
            "title": "Node.js Software Development Kit (SDK)"
        },
        {
            "location": "/nodejs/#prerequisites",
            "text": "Before you get started, you should have  Node.js  installed on your system. We've tested this wrapper with version 6.11.1.  You should also have  npm  installed on your machine too.  You should create an account with  Worldpay Online  so that you're able to generate your own test API key. You'll replace the Worldpay test keys with your own in the SDK.  Warning: Make sure you only use test API keys.",
            "title": "Prerequisites"
        },
        {
            "location": "/nodejs/#get-started",
            "text": "Once you've got Node.js and npm.js, you should be good to go.   Clone or download  the repository .  Change to the folder  cd wpw-sdk-nodejs  (if using linux / unix).  Run the following command:  npm install thrift sleep . \n    Note: If you are using a different package manager than npm, please adjust the command accordingly. \n    (If there are issues about access rights, add sudo in front of the above command)",
            "title": "Get started"
        },
        {
            "location": "/nodejs/#run-the-examples",
            "text": "Once you've got the repository and have changed to the right folder, you can start testing to see if it works. We'd recommend using your own test API keys for this. We've left our ones in the code, but you won't be able to see the payments with our keys.   In one terminal / cmd (or on one device) run:  node example-producer-callbacks.js . \n    (You can run  node example-producer.js  but this does not recall the producer, once it times out)  In another terminal / cmd, (or on another device, on the same network) run:  node example-consumer.js .  A payment should happen. If you see the serviceDeliveryToken returned within the producer terminal/cmd, you will know that the payment was complete.",
            "title": "Run the examples"
        },
        {
            "location": "/nodejs/#see-the-payments",
            "text": "Once the devices have successfully communicated with each other to make a payment, you'll want to check to make sure that your devices are successfully making and receiving payments.",
            "title": "See the payments"
        },
        {
            "location": "/nodejs/#if-you-used-your-own-test-api-keys",
            "text": "Login to  Worldpay Online .  You'll see your dashboard. Scroll down and you should see the payment within your  Recent Orders .",
            "title": "If you used your own test API keys"
        },
        {
            "location": "/nodejs/#if-youve-used-worldpays-own-test-api-keys",
            "text": "Login to  Worldpay Online .  Got to  Settings > API keys  and get your test keys.  Replace the keys in the producer files.  Re-run the examples and you should see the payments coming through on the Worldpay Online payments dashboard.",
            "title": "If you've used Worldpay's own test API keys"
        },
        {
            "location": "/nodejs/#debugging",
            "text": "If you get some odd error messages talking about a 'rpc-agent':   Try typing the following command: 'ps -e | grep rpc' to get the pid(s) of rpc-agents that are running.  Then do kill   e.g. kill 13249234 to kill these processes.  Try re-running the examples   If you're still having trouble, you can contact us at  Innovation@Worldpay.com  or reach out to us on our  Slack channel . Alternatively, you can  raise an issue in GitHub .",
            "title": "Debugging"
        },
        {
            "location": "/nodejs/#so-whats-happening",
            "text": "The Worldpay Within Flows sequence diagram  You can see there are four phases;  Discover ,  Negotiation ,  Payment , and  Service delivery . For more information, see  Worldpay Within .",
            "title": "So what's happening?"
        },
        {
            "location": "/nodejs/#what-iot-devices-can-i-run-this-on",
            "text": "Hopefully any. We've only tested this on RPi - Raspberry Pis at the moment, but we welcome experiments on all other kinds of devices! Note that they will need to be on the same network - and that network should allow for UDP broadcast traffic. Most mobile hotspots allow this; a lot of corporate networks do not...",
            "title": "What IoT devices can I run this on?"
        },
        {
            "location": "/nodejs/#want-to-contribute",
            "text": "If you want to contribute, clone the repository and create a branch. Once you've made your changes, create a pull request. We'll review your code, and if accepted it will be merged into the code base. It's worth checkout out the  Internal Structure of Worldpay Within  and  Sample Service Messaging  pages if you want to learn more about how Worldpay Within works.  You can also  raise an issue in GitHub , or contact us directly at  Innovation@Worldpay.com . You can also reach out to us on our  Slack channel .",
            "title": "Want to contribute?"
        },
        {
            "location": "/python27/",
            "text": "Python Software Development Kit (SDK)\n\u00b6\n\n\nThe Python implementation for the Worldpay Within IoT payment SDK. This SDK enables smart devices to discover each other, negotiate a price for services, make a payment (through Worldpay) for services, and then consume services via a 'trusted trigger'. For more information see our documentation website here: \nWorldpay Within\n.\n\n\nPrerequisites\n\u00b6\n\n\n\n\nBefore you get started, you should have Python installed on your system. We've built the SDK to work with version 2.7 and 3.\n\n\nYou should create an account with \nWorldpay Online\n so that you're able to generate your own test API key. You'll replace the Worldpay test keys with your own in the SDK.\n\n\n\n\nGet started\n\u00b6\n\n\n\n\nDownload the \nrepository\n.\n\n\nDownload the latest version of Apache Thrift (currently 0.10.0).\n\n\nExtract the repository and change to the lib/py/ directory.\n\n\nRun the following command: sudo python setup.py install.\n\n\n\n\nRun the examples\n\u00b6\n\n\nYou can try the examples by running the examples in two different console windows. Or, if you're installing on two separate devices, they must be one the same network that allows UDP broadcast traffic. Make sure you're using rhw Online Worldpay (OWP) files rather than the Worldpay Total (WT) ones.\n\n\n\n\nIn the first window, run python runConsumerOWP.py\n\n\nIn the second window, run python runProducerOWP.py OR python runProducerCallbacksOWP.py\n\n\nThe two smart devices should communicate with each other and make a payment\n\n\n\n\nSee the payments\n\u00b6\n\n\nOnce the devices have successfully communicated with each other to make a payment, you'll want to check to make sure that your devices are successfully making and receiving payments.\n\n\nIf you used your own test API keys\n\u00b6\n\n\n\n\nLogin to \nWorldpay Online\n.\n\n\nYou'll see your dashboard. Scroll down and you should see the payment within your \nRecent Orders\n.\n\n\n\n\nIf you've used Worldpay's own test API keys\n\u00b6\n\n\n\n\nLogin to \nWorldpay Online\n.\n\n\nGot to \nSettings > API keys\n and get your test keys.\n\n\nReplace the keys in the producer python files.\n\n\nRe-run the examples and you should see the payments coming through on the Worldpay Online payments dashboard.\n\n\n\n\nDebugging\n\u00b6\n\n\nIf you get some odd error messages talking about a 'rpc-agent':\n\n\n\n\nTry typing the following command: 'ps -e | grep rpc' to get the pid(s) of rpc-agents that are running.\n\n\nThen do kill \n e.g. kill 13249234 to kill these processes.\n\n\nTry re-running the examples\n\n\n\n\nIf you're still having trouble, you can contact us at \nInnovation@Worldpay.com\n or reach out to us on our \nSlack channel\n. Alternatively, you can \nraise an issue in GitHub\n.\n\n\nSo what's happening?\n\u00b6\n\n\n\n\nThe Worldpay Within Flows sequence diagram\n\n\nYou can see there are four phases: \nDiscover\n, \nNegotiation\n, \nPayment\n, and \nService delivery\n. For more information, see \nWorldpay Within\n.\n\n\nWhat IoT devices can I run this on?\n\u00b6\n\n\nHopefully any. We've only tested this on RPi - Raspberry Pis at the moment, but we welcome experiments on all other kinds of devices! Note that they will need to be on the same network - and that network should allow for UDP broadcast traffic. Most mobile hotspots allow this; a lot of corporate networks do not...\n\n\nWant to contribute?\n\u00b6\n\n\nIf you want to contribute, clone the repository and create a branch. Once you've made your changes, create a pull request. We'll review your code, and if accepted it will be merged into the code base. It's worth checkout out the \nInternal Structure of Worldpay Within\n and \nSample Service Messaging\n pages if you want to learn more about how Worldpay Within works.\n\n\nYou can also \nraise an issue in GitHub\n, or contact us directly at \nInnovation@Worldpay.com\n. You can also reach out to us on our \nSlack channel\n.",
            "title": "Python 2.7"
        },
        {
            "location": "/python27/#python-software-development-kit-sdk",
            "text": "The Python implementation for the Worldpay Within IoT payment SDK. This SDK enables smart devices to discover each other, negotiate a price for services, make a payment (through Worldpay) for services, and then consume services via a 'trusted trigger'. For more information see our documentation website here:  Worldpay Within .",
            "title": "Python Software Development Kit (SDK)"
        },
        {
            "location": "/python27/#prerequisites",
            "text": "Before you get started, you should have Python installed on your system. We've built the SDK to work with version 2.7 and 3.  You should create an account with  Worldpay Online  so that you're able to generate your own test API key. You'll replace the Worldpay test keys with your own in the SDK.",
            "title": "Prerequisites"
        },
        {
            "location": "/python27/#get-started",
            "text": "Download the  repository .  Download the latest version of Apache Thrift (currently 0.10.0).  Extract the repository and change to the lib/py/ directory.  Run the following command: sudo python setup.py install.",
            "title": "Get started"
        },
        {
            "location": "/python27/#run-the-examples",
            "text": "You can try the examples by running the examples in two different console windows. Or, if you're installing on two separate devices, they must be one the same network that allows UDP broadcast traffic. Make sure you're using rhw Online Worldpay (OWP) files rather than the Worldpay Total (WT) ones.   In the first window, run python runConsumerOWP.py  In the second window, run python runProducerOWP.py OR python runProducerCallbacksOWP.py  The two smart devices should communicate with each other and make a payment",
            "title": "Run the examples"
        },
        {
            "location": "/python27/#see-the-payments",
            "text": "Once the devices have successfully communicated with each other to make a payment, you'll want to check to make sure that your devices are successfully making and receiving payments.",
            "title": "See the payments"
        },
        {
            "location": "/python27/#if-you-used-your-own-test-api-keys",
            "text": "Login to  Worldpay Online .  You'll see your dashboard. Scroll down and you should see the payment within your  Recent Orders .",
            "title": "If you used your own test API keys"
        },
        {
            "location": "/python27/#if-youve-used-worldpays-own-test-api-keys",
            "text": "Login to  Worldpay Online .  Got to  Settings > API keys  and get your test keys.  Replace the keys in the producer python files.  Re-run the examples and you should see the payments coming through on the Worldpay Online payments dashboard.",
            "title": "If you've used Worldpay's own test API keys"
        },
        {
            "location": "/python27/#debugging",
            "text": "If you get some odd error messages talking about a 'rpc-agent':   Try typing the following command: 'ps -e | grep rpc' to get the pid(s) of rpc-agents that are running.  Then do kill   e.g. kill 13249234 to kill these processes.  Try re-running the examples   If you're still having trouble, you can contact us at  Innovation@Worldpay.com  or reach out to us on our  Slack channel . Alternatively, you can  raise an issue in GitHub .",
            "title": "Debugging"
        },
        {
            "location": "/python27/#so-whats-happening",
            "text": "The Worldpay Within Flows sequence diagram  You can see there are four phases:  Discover ,  Negotiation ,  Payment , and  Service delivery . For more information, see  Worldpay Within .",
            "title": "So what's happening?"
        },
        {
            "location": "/python27/#what-iot-devices-can-i-run-this-on",
            "text": "Hopefully any. We've only tested this on RPi - Raspberry Pis at the moment, but we welcome experiments on all other kinds of devices! Note that they will need to be on the same network - and that network should allow for UDP broadcast traffic. Most mobile hotspots allow this; a lot of corporate networks do not...",
            "title": "What IoT devices can I run this on?"
        },
        {
            "location": "/python27/#want-to-contribute",
            "text": "If you want to contribute, clone the repository and create a branch. Once you've made your changes, create a pull request. We'll review your code, and if accepted it will be merged into the code base. It's worth checkout out the  Internal Structure of Worldpay Within  and  Sample Service Messaging  pages if you want to learn more about how Worldpay Within works.  You can also  raise an issue in GitHub , or contact us directly at  Innovation@Worldpay.com . You can also reach out to us on our  Slack channel .",
            "title": "Want to contribute?"
        },
        {
            "location": "/documentation/",
            "text": "Theme Documentation\n\u00b6\n\n\nBlockquotes\n\u00b6\n\n\n\n\nMorbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum.\n  Pellentesque aliquet quam enim, eu volutpat urna rutrum a.\n\n\n\n\nLists\n\u00b6\n\n\nUnordered lists\n\u00b6\n\n\n\n\nSed sagittis eleifend rutrum.\n\n\nDuis mollis est eget nibh volutpat, fermentum aliquet dui mollis.\n\n\n\n\n\n\nAliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex.\n\n\nNulla et rhoncus turpis. \n\n\n\n\nOrdered lists\n\u00b6\n\n\n\n\n\n\nInteger vehicula feugiat magna, a mollis tellus. \n\n\n\n\n\n\nCum sociis natoque penatibus et magnis dis parturient montes, nascetur\n  ridiculus mus.\n\n\n\n\n\n\nVivamus venenatis porttitor tortor sit amet rutrum. \n\n\n\n\n\n\nMorbi eget dapibus felis. \n\n\n\n\n\n\nPellentesque eget \nvar\n \n_extends\n ornare tellus, ut gravida mi.\n\n\n\n\n\n\n\n\n\n\nVivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis.\n\n\n\n\n\n\nDefinition lists\n\u00b6\n\n\n\n\nLorem ipsum dolor sit amet\n\n\n\n\nSed sagittis eleifend rutrum. Donec vitae suscipit est.\n\n\n\n\nCras arcu libero\n\n\n\n\nAliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin\nut eros sed sapien ullamcorper consequat. \n\n\n\n\n\n\nCode blocks\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nvar\n \n_extends\n \n=\n \nfunction\n(\ntarget\n)\n \n{\n\n  \nfor\n \n(\nvar\n \ni\n \n=\n \n1\n;\n \ni\n \n<\n \narguments\n.\nlength\n;\n \ni\n++\n)\n \n{\n\n    \nvar\n \nsource\n \n=\n \narguments\n[\ni\n];\n\n    \nfor\n \n(\nvar\n \nkey\n \nin\n \nsource\n)\n \n{\n\n      \ntarget\n[\nkey\n]\n \n=\n \nsource\n[\nkey\n];\n\n    \n}\n\n  \n}\n\n\n  \nreturn\n \ntarget\n;\n\n\n};\n\n\n\n\n\n\n\nHorizontal line\n\u00b6\n\n\n\n\nData tables\n\u00b6\n\n\n\n\n\n\n\n\nSollicitudo / Pellentesi\n\n\nconsectetur\n\n\nadipiscing\n\n\n\n\n\n\n\n\n\n\nVivamus a pharetra\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nOrnare viverra ex\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nMauris a ullamcorper\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nNullam urna elit\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nMalesuada eget finibus\n\n\nyes\n\n\nyes\n\n\n\n\n\n\n\n\nNotes\n\u00b6\n\n\n\n\nNote\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nPhasellus posuere in sem ut cursus\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nNote\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\nSELECT\n\n  \nEmployees\n.\nEmployeeID\n,\n\n  \nEmployees\n.\nName\n,\n\n  \nEmployees\n.\nSalary\n,\n\n  \nManager\n.\nName\n \nAS\n \nManager\n\n\nFROM\n\n  \nEmployees\n\n\n\n\n\nNunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in\nsem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis.\nEtiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.\n\n\n\n\n\n\nSummary\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nTip\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nSuccess\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nWarning\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nFailure\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nDanger\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nBug\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nQuote\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nCode Block\n\u00b6\n\n\nimport\n \ntensorflow\n \nas\n \ntf\n\n\n\n\n\n#!/usr/bin/python\n\n\nimport\n \ntensorflow\n \nas\n \ntf\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n\"\"\" Bubble sort \"\"\"\n\n\ndef\n \nbubble_sort\n(\nitems\n):\n\n    \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\nitems\n)):\n\n        \nfor\n \nj\n \nin\n \nrange\n(\nlen\n(\nitems\n)\n \n-\n \n1\n \n-\n \ni\n):\n\n            \nif\n \nitems\n[\nj\n]\n \n>\n \nitems\n[\nj\n \n+\n \n1\n]:\n\n                \nitems\n[\nj\n],\n \nitems\n[\nj\n \n+\n \n1\n]\n \n=\n \nitems\n[\nj\n \n+\n \n1\n],\n \nitems\n[\nj\n]\n\n\n\n#!python hl_lines=\"3 4\"\n\n\n\"\"\" Bubble sort \"\"\"\n\n\ndef\n \nbubble_sort\n(\nitems\n):\n\n    \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\nitems\n)):\n\n        \nfor\n \nj\n \nin\n \nrange\n(\nlen\n(\nitems\n)\n \n-\n \n1\n \n-\n \ni\n):\n\n            \nif\n \nitems\n[\nj\n]\n \n>\n \nitems\n[\nj\n \n+\n \n1\n]:\n\n                \nitems\n[\nj\n],\n \nitems\n[\nj\n \n+\n \n1\n]\n \n=\n \nitems\n[\nj\n \n+\n \n1\n],\n \nitems\n[\nj\n]\n\n\n\n\n\n\n\nFootnotes\n\u00b6\n\n\nLorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2]\n\n\nJump to footnote at the bottom of the page\n\n\nMetadata\n\u00b6\n\n\nThe \nMetadata\n extension makes it possible to add metadata to a document\nwhich gives more control over the theme in a page-specific context.\n\n\nExample:\n\n\ntitle: Lorem ipsum dolor sit amet\ndescription: Nullam urna elit, malesuada eget finibus ut, ac tortor.\npath: path/to/file\nsource: file.js\n\n## Permalinks\n\nPermalinks are a feature of the [Table of Contents][1] extension, which is part\nof the standard Markdown library. The extension inserts an anchor at the end of\neach headline, which makes it possible to directly link to a subpart of the\ndocument.\n\n  [1]: https://pythonhosted.org/Markdown/extensions/toc.html\n\n## Installation\n\nTo enable permalinks, add the following to your `mkdocs.yml`:\n\n``` yaml\nmarkdown_extensions:\n  - toc(permalink=true)\n\n\n\n\nThis will add a link containing the paragraph symbol \n\u00b6\n at the end of each\nheadline (exactly like on the page you're currently viewing), which the\nMaterial theme will make appear on hover. In order to change the text of the\npermalink, a string can be passed, e.g.:\n\n\nmarkdown_extensions:\n  - toc(permalink=Link)\n\n\n\n\nPyMdown Extensions\n\u00b6\n\n\nPyMdown Extensions\n is a collection of Markdown extensions that add some\ngreat features to the standard Markdown library. For this reason, the\n\ninstallation of this package is highly recommended\n as it's well-integrated\nwith the Material theme.\n\n\nInstallation\n\u00b6\n\n\nThe PyMdown Extensions package can be installed with the following command:\n\n\npip install pymdown-extensions\n\n\n\n\nThe following list of extensions that are part of the PyMdown Extensions\npackage are recommended to be used together with the Material theme:\n\n\nmarkdown_extensions\n:\n\n  \n-\n \npymdownx.arithmatex\n\n  \n-\n \npymdownx.betterem(smart_enable=all)\n\n  \n-\n \npymdownx.caret\n\n  \n-\n \npymdownx.critic\n\n  \n-\n \npymdownx.emoji\n:\n\n      \nemoji_generator\n:\n \n!!python/name:pymdownx.emoji.to_svg\n\n  \n-\n \npymdownx.inlinehilite\n\n  \n-\n \npymdownx.magiclink\n\n  \n-\n \npymdownx.mark\n\n  \n-\n \npymdownx.smartsymbols\n\n  \n-\n \npymdownx.superfences\n\n  \n-\n \npymdownx.tasklist(custom_checkbox=true)\n\n  \n-\n \npymdownx.tilde\n\n\n\n\n\nUsage\n\u00b6\n\n\nGitHub Flavored Markdown\n\u00b6\n\n\nMost of the extensions included in the PyMdown Extensions package try to bring\nthe Markdown experience closer to GitHub Flavored Markdown (GFM).\n\n\nThe PyMdown Extensions package adds a shorthand to enable all of the included\nextensions that provide the GFM experience. However, usage of the shorthand is\ndiscouraged, because some extensions are not supported, as the Material theme\nuses some incompatible extensions included in the standard Markdown library.\n\n\nBetterEm\n\u00b6\n\n\nBetterEm\n improves the handling of emphasis markup (\nbold\n and \nitalic\n)\nwithin Markdown by providing a more sophisticated parser for better detecting\nstart and end tokens. Read the documentation for \nusage notes\n.\n\n\nEmoji\n\u00b6\n\n\nEmoji\n adds the ability to insert a \n-load of emojis that we use in\nour daily lives. See the \nEmojiOne demo\n for a list of all available\nemojis. Happy scrolling \n\n\n\n\nLegal disclaimer\n\n\nMaterial has no affiliation with \nEmojiOne\n which is released under\n\nCC BY 4.0\n. When including EmojiOne images or CSS, please read the\n\nEmojiOne license\n to ensure proper usage and attribution.\n\n\n\n\nMagicLink\n\u00b6\n\n\nMagicLink\n detects links in Markdown and auto-generates the necessary\nmarkup, so no special syntax is required. It auto-links \nhttp[s]://\n and\n\nftp://\n links, as well as references to email addresses:\n\n\nSuperFences\n\u00b6\n\n\nSuperFences\n provides the ability to nest code blocks under blockquotes,\nlists and other block elements, which the \nFenced Code Blocks\n extension\nfrom the standard Markdown library doesn't parse correctly.\n\n\nTasklist\n\u00b6\n\n\nTasklist\n adds support for styled checkbox lists. This is useful for\nkeeping track of tasks and showing what has been done and has yet to be done.\nCheckbox lists are like regular lists, but prefixed with \n[ ]\n for empty or\n\n[x]\n for filled checkboxes.\n\n\nExample:\n\n\n* [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n* [x] Nulla lobortis egestas semper\n* [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est\n* [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis\n    * [ ] Praesent sed risus massa\n* [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n* [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi\n\n\n\n\nResult:\n\n\n\n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit\n\n\n Nulla lobortis egestas semper\n\n\n Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est\n\n\n Vestibulum convallis sit amet nisi a tincidunt\n\n\n In hac habitasse platea dictumst\n\n\n In scelerisque nibh non dolor mollis congue sed et metus\n\n\n Sed egestas felis quis elit dapibus, ac aliquet turpis mattis\n\n\n Praesent sed risus massa\n\n\n\n\n\n\n Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n\n\n Nulla vel eros venenatis, imperdiet enim id, faucibus nisi\n\n\n\n\nTilde\n\u00b6\n\n\nTilde\n provides an easy way to \nstrike through\n cross out\u00a0text.\nThe portion of text that should be erased must be enclosed in two tildes\n\n~~...~~\n and the extension will take care of the rest.\n\n\nMore syntactic sugar\n\u00b6\n\n\nCaret\n\u00b6\n\n\nCaret\n is the sister extension of \nTilde\n and makes it possible to\nhighlight \ninserted text\n. The portion of text that should be marked as added\nmust be enclosed in two carets \n^^...^^\n.\n\n\nMark\n\u00b6\n\n\nMark\n adds the ability to \nhighlight text\n like it was marked with a\n\nyellow text marker\n. The portion of text that should be highlighted must be\nenclosed in two equal signs \n==...==\n.\n\n\nSmartSymbols\n\u00b6\n\n\nSmartSymbols\n converts markup for special characters into their\ncorresponding symbols, e.g. arrows (\u2190, \u2192, \u2194), trademark and copyright\nsymbols (\u00a9, \u2122, \u00ae) and fractions (\u00bd, \u00bc, ...).\n\n\nCritic\n\u00b6\n\n\nCritic\n implements \nCritic Markup\n, a Markdown extension that enables\nthe tracking of changes (additions, deletions and comments) on documents.\nDuring compilation of the Markdown document, changes can be rendered (default),\naccepted or rejected.\n\n\nText can be \ndeleted\n and replacement text \nadded\n. This can also be\ncombined into \none\na single\n operation. \nHighlighting\n is also\npossible \nand comments can be added inline\n.\n\n\n\n\nFormatting can also be applied to blocks, by putting the opening and closing\ntags on separate lines and adding new lines between the tags and the content.",
            "title": "hidden"
        },
        {
            "location": "/documentation/#theme-documentation",
            "text": "",
            "title": "Theme Documentation"
        },
        {
            "location": "/documentation/#blockquotes",
            "text": "Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum.\n  Pellentesque aliquet quam enim, eu volutpat urna rutrum a.",
            "title": "Blockquotes"
        },
        {
            "location": "/documentation/#lists",
            "text": "",
            "title": "Lists"
        },
        {
            "location": "/documentation/#unordered-lists",
            "text": "Sed sagittis eleifend rutrum.  Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.    Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex.  Nulla et rhoncus turpis.",
            "title": "Unordered lists"
        },
        {
            "location": "/documentation/#ordered-lists",
            "text": "Integer vehicula feugiat magna, a mollis tellus.     Cum sociis natoque penatibus et magnis dis parturient montes, nascetur\n  ridiculus mus.    Vivamus venenatis porttitor tortor sit amet rutrum.     Morbi eget dapibus felis.     Pellentesque eget  var   _extends  ornare tellus, ut gravida mi.      Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis.",
            "title": "Ordered lists"
        },
        {
            "location": "/documentation/#definition-lists",
            "text": "Lorem ipsum dolor sit amet   Sed sagittis eleifend rutrum. Donec vitae suscipit est.   Cras arcu libero   Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin\nut eros sed sapien ullamcorper consequat.",
            "title": "Definition lists"
        },
        {
            "location": "/documentation/#code-blocks",
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 var   _extends   =   function ( target )   { \n   for   ( var   i   =   1 ;   i   <   arguments . length ;   i ++ )   { \n     var   source   =   arguments [ i ]; \n     for   ( var   key   in   source )   { \n       target [ key ]   =   source [ key ]; \n     } \n   }     return   target ;  };",
            "title": "Code blocks"
        },
        {
            "location": "/documentation/#horizontal-line",
            "text": "",
            "title": "Horizontal line"
        },
        {
            "location": "/documentation/#data-tables",
            "text": "Sollicitudo / Pellentesi  consectetur  adipiscing      Vivamus a pharetra  yes  yes    Ornare viverra ex  yes  yes    Mauris a ullamcorper  yes  yes    Nullam urna elit  yes  yes    Malesuada eget finibus  yes  yes",
            "title": "Data tables"
        },
        {
            "location": "/documentation/#notes",
            "text": "Note  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Phasellus posuere in sem ut cursus  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Note  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.  SELECT \n   Employees . EmployeeID , \n   Employees . Name , \n   Employees . Salary , \n   Manager . Name   AS   Manager  FROM \n   Employees   Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in\nsem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis.\nEtiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.    Summary  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Tip  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Success  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Warning  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Failure  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Danger  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Bug  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Quote  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.",
            "title": "Notes"
        },
        {
            "location": "/documentation/#code-block",
            "text": "import   tensorflow   as   tf   #!/usr/bin/python  import   tensorflow   as   tf    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 \"\"\" Bubble sort \"\"\"  def   bubble_sort ( items ): \n     for   i   in   range ( len ( items )): \n         for   j   in   range ( len ( items )   -   1   -   i ): \n             if   items [ j ]   >   items [ j   +   1 ]: \n                 items [ j ],   items [ j   +   1 ]   =   items [ j   +   1 ],   items [ j ]  #!python hl_lines=\"3 4\"  \"\"\" Bubble sort \"\"\"  def   bubble_sort ( items ): \n     for   i   in   range ( len ( items )): \n         for   j   in   range ( len ( items )   -   1   -   i ): \n             if   items [ j ]   >   items [ j   +   1 ]: \n                 items [ j ],   items [ j   +   1 ]   =   items [ j   +   1 ],   items [ j ]",
            "title": "Code Block"
        },
        {
            "location": "/documentation/#footnotes",
            "text": "Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2]  Jump to footnote at the bottom of the page",
            "title": "Footnotes"
        },
        {
            "location": "/documentation/#metadata",
            "text": "The  Metadata  extension makes it possible to add metadata to a document\nwhich gives more control over the theme in a page-specific context.  Example:  title: Lorem ipsum dolor sit amet\ndescription: Nullam urna elit, malesuada eget finibus ut, ac tortor.\npath: path/to/file\nsource: file.js\n\n## Permalinks\n\nPermalinks are a feature of the [Table of Contents][1] extension, which is part\nof the standard Markdown library. The extension inserts an anchor at the end of\neach headline, which makes it possible to directly link to a subpart of the\ndocument.\n\n  [1]: https://pythonhosted.org/Markdown/extensions/toc.html\n\n## Installation\n\nTo enable permalinks, add the following to your `mkdocs.yml`:\n\n``` yaml\nmarkdown_extensions:\n  - toc(permalink=true)  This will add a link containing the paragraph symbol  \u00b6  at the end of each\nheadline (exactly like on the page you're currently viewing), which the\nMaterial theme will make appear on hover. In order to change the text of the\npermalink, a string can be passed, e.g.:  markdown_extensions:\n  - toc(permalink=Link)",
            "title": "Metadata"
        },
        {
            "location": "/documentation/#pymdown-extensions",
            "text": "PyMdown Extensions  is a collection of Markdown extensions that add some\ngreat features to the standard Markdown library. For this reason, the installation of this package is highly recommended  as it's well-integrated\nwith the Material theme.",
            "title": "PyMdown Extensions"
        },
        {
            "location": "/documentation/#installation",
            "text": "The PyMdown Extensions package can be installed with the following command:  pip install pymdown-extensions  The following list of extensions that are part of the PyMdown Extensions\npackage are recommended to be used together with the Material theme:  markdown_extensions : \n   -   pymdownx.arithmatex \n   -   pymdownx.betterem(smart_enable=all) \n   -   pymdownx.caret \n   -   pymdownx.critic \n   -   pymdownx.emoji : \n       emoji_generator :   !!python/name:pymdownx.emoji.to_svg \n   -   pymdownx.inlinehilite \n   -   pymdownx.magiclink \n   -   pymdownx.mark \n   -   pymdownx.smartsymbols \n   -   pymdownx.superfences \n   -   pymdownx.tasklist(custom_checkbox=true) \n   -   pymdownx.tilde",
            "title": "Installation"
        },
        {
            "location": "/documentation/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/documentation/#github-flavored-markdown",
            "text": "Most of the extensions included in the PyMdown Extensions package try to bring\nthe Markdown experience closer to GitHub Flavored Markdown (GFM).  The PyMdown Extensions package adds a shorthand to enable all of the included\nextensions that provide the GFM experience. However, usage of the shorthand is\ndiscouraged, because some extensions are not supported, as the Material theme\nuses some incompatible extensions included in the standard Markdown library.",
            "title": "GitHub Flavored Markdown"
        },
        {
            "location": "/documentation/#betterem",
            "text": "BetterEm  improves the handling of emphasis markup ( bold  and  italic )\nwithin Markdown by providing a more sophisticated parser for better detecting\nstart and end tokens. Read the documentation for  usage notes .",
            "title": "BetterEm"
        },
        {
            "location": "/documentation/#emoji",
            "text": "Emoji  adds the ability to insert a  -load of emojis that we use in\nour daily lives. See the  EmojiOne demo  for a list of all available\nemojis. Happy scrolling    Legal disclaimer  Material has no affiliation with  EmojiOne  which is released under CC BY 4.0 . When including EmojiOne images or CSS, please read the EmojiOne license  to ensure proper usage and attribution.",
            "title": "Emoji"
        },
        {
            "location": "/documentation/#magiclink",
            "text": "MagicLink  detects links in Markdown and auto-generates the necessary\nmarkup, so no special syntax is required. It auto-links  http[s]://  and ftp://  links, as well as references to email addresses:",
            "title": "MagicLink"
        },
        {
            "location": "/documentation/#superfences",
            "text": "SuperFences  provides the ability to nest code blocks under blockquotes,\nlists and other block elements, which the  Fenced Code Blocks  extension\nfrom the standard Markdown library doesn't parse correctly.",
            "title": "SuperFences"
        },
        {
            "location": "/documentation/#tasklist",
            "text": "Tasklist  adds support for styled checkbox lists. This is useful for\nkeeping track of tasks and showing what has been done and has yet to be done.\nCheckbox lists are like regular lists, but prefixed with  [ ]  for empty or [x]  for filled checkboxes.  Example:  * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n* [x] Nulla lobortis egestas semper\n* [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est\n* [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis\n    * [ ] Praesent sed risus massa\n* [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n* [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi  Result:    Lorem ipsum dolor sit amet, consectetur adipiscing elit   Nulla lobortis egestas semper   Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est   Vestibulum convallis sit amet nisi a tincidunt   In hac habitasse platea dictumst   In scelerisque nibh non dolor mollis congue sed et metus   Sed egestas felis quis elit dapibus, ac aliquet turpis mattis   Praesent sed risus massa     Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque   Nulla vel eros venenatis, imperdiet enim id, faucibus nisi",
            "title": "Tasklist"
        },
        {
            "location": "/documentation/#tilde",
            "text": "Tilde  provides an easy way to  strike through  cross out\u00a0text.\nThe portion of text that should be erased must be enclosed in two tildes ~~...~~  and the extension will take care of the rest.",
            "title": "Tilde"
        },
        {
            "location": "/documentation/#more-syntactic-sugar",
            "text": "",
            "title": "More syntactic sugar"
        },
        {
            "location": "/documentation/#caret",
            "text": "Caret  is the sister extension of  Tilde  and makes it possible to\nhighlight  inserted text . The portion of text that should be marked as added\nmust be enclosed in two carets  ^^...^^ .",
            "title": "Caret"
        },
        {
            "location": "/documentation/#mark",
            "text": "Mark  adds the ability to  highlight text  like it was marked with a yellow text marker . The portion of text that should be highlighted must be\nenclosed in two equal signs  ==...== .",
            "title": "Mark"
        },
        {
            "location": "/documentation/#smartsymbols",
            "text": "SmartSymbols  converts markup for special characters into their\ncorresponding symbols, e.g. arrows (\u2190, \u2192, \u2194), trademark and copyright\nsymbols (\u00a9, \u2122, \u00ae) and fractions (\u00bd, \u00bc, ...).",
            "title": "SmartSymbols"
        },
        {
            "location": "/documentation/#critic",
            "text": "Critic  implements  Critic Markup , a Markdown extension that enables\nthe tracking of changes (additions, deletions and comments) on documents.\nDuring compilation of the Markdown document, changes can be rendered (default),\naccepted or rejected.  Text can be  deleted  and replacement text  added . This can also be\ncombined into  one a single  operation.  Highlighting  is also\npossible  and comments can be added inline .   Formatting can also be applied to blocks, by putting the opening and closing\ntags on separate lines and adding new lines between the tags and the content.",
            "title": "Critic"
        }
    ]
}