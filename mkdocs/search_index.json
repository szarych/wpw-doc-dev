{
    "docs": [
        {
            "location": "/",
            "text": "Overview\n\u00b6\n\n\n\n  \n\n    \n\n  \n\n  \n\n    \n What is it \n\n    \n Lorem ipsum is hard to consume and I use it as a last resort. So, I'll fill random text please and you don't even have to read it. Lorem ipsum is hard to consume and I use it as a last resort. So, I'll fill to read it. \n\n    \nThe Flows\n\n  \n\n\n\n\n\n\n  \n\n    \n\n  \n\n  \n\n    \n How it works \n\n    \n I don't know what to type here so let me fill some random text. Lorem ipsum is hard to consume and I use it as a last resort. So, I'll fill random text please and you don't even have to read it. \n\n    \nArchitecture\n\n  \n\n\n\n\n\n\n  \n\n    \n\n  \n\n  \n\n    \n What is it \n\n    \n Lorem ipsum is hard to consume and I use it as a last resort. So, I'll fill random text please and you don't even have to read it. Lorem ipsum is hard to consume and I use it as a last resort. So, I'll fill to read it. \n\n    \nGetting Started\n\n  \n\n\n\n\n\n\n  \n\n    \n What is it \n\n    \n Lorem ipsum is hard to consume and I use it as a last resort. So, I'll fill random text please and you don't even have to read it. Lorem ipsum is hard to consume and I use it as a last resort. So, I'll fill to read it. \n\n  \n\n  \n\n    \n\n  \n\n\n\n\n\n\n  \nAPI docs\n\n  \nJava\n\n  \n.NET\n\n  \nGo\n\n  \nNode.js\n\n  \nPython (2.7)",
            "title": "Overview"
        },
        {
            "location": "/#overview",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/getting-started/",
            "text": "Getting started\n\u00b6\n\n\nWe are an open source project, and some of our internal dev terms may spill out to the external SDK - apologies for this. But think of the SDK you download as being the API to a set of really cool services that allow smart devices to pay for services from oneanother\n\n\nWhat you get from the SDK you download from our git repo, is access to the API in all the supported languages (we refer this as the 'wrapper'), you will still need to get the core IoT component from the releases (we refer to this as the 'RPC-agent'). \nIf you're interested further on the internal architectcure of the project check this out\n.\n\n\nGet the SDK (software development kit) from the Github repository\n\u00b6\n\n\nPlease either download the repo, or clone the repo from Github, \nthe github repo for Worldpay Within can be found here\n\n\nDownload the core Iot component\n\u00b6\n\n\nThe Iot core component is sometimes called the \"RPC-Agent\" (and sometimes referred to as the binaries) from the Github Repository\n\n\n\n\nGo to the releases page here \nhttps://github.com/WPTechInnovation/worldpay-within-sdk/releases\n\n\nDownload the zip file entitled 'wpwithin-<version_number>-bins.tar.gz' e.g. wpwithin-0.4-bins.tar.gz - make sure to get the latest one though!\n\n\nYou don't need all the files in this download! Oh no, you'll just need the ones for the computer that you are developing on, and thing (smart device) that you are going to run it on.\n\n\nUnzip the file rpc-agent-bins-<version_number>.tar.gz\n\n\nChoose the RPC-agent file appropriate to your Thing or development machine.\n\n\n\n\nSetup your environment Worldpay Within\n\u00b6\n\n\nYou'll need to drop the core IoT component (RPC-agent file) into the appropriate place in the SDK (or wrapper directory).\n\n\nFollow the instructions for each supported language on where to place the core IoT component (RPC-agent file) and what to call it. The instructions will also let you know if there are any other pre-requisites to install on your device before you get started.\n\n\nJava\n\n\n.NET\n\n\nGo\n\n\nGo\n\n\nNode.js\n\n\nPython (2.7)",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#getting-started",
            "text": "We are an open source project, and some of our internal dev terms may spill out to the external SDK - apologies for this. But think of the SDK you download as being the API to a set of really cool services that allow smart devices to pay for services from oneanother  What you get from the SDK you download from our git repo, is access to the API in all the supported languages (we refer this as the 'wrapper'), you will still need to get the core IoT component from the releases (we refer to this as the 'RPC-agent').  If you're interested further on the internal architectcure of the project check this out .",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#get-the-sdk-software-development-kit-from-the-github-repository",
            "text": "Please either download the repo, or clone the repo from Github,  the github repo for Worldpay Within can be found here",
            "title": "Get the SDK (software development kit) from the Github repository"
        },
        {
            "location": "/getting-started/#download-the-core-iot-component",
            "text": "The Iot core component is sometimes called the \"RPC-Agent\" (and sometimes referred to as the binaries) from the Github Repository   Go to the releases page here  https://github.com/WPTechInnovation/worldpay-within-sdk/releases  Download the zip file entitled 'wpwithin-<version_number>-bins.tar.gz' e.g. wpwithin-0.4-bins.tar.gz - make sure to get the latest one though!  You don't need all the files in this download! Oh no, you'll just need the ones for the computer that you are developing on, and thing (smart device) that you are going to run it on.  Unzip the file rpc-agent-bins-<version_number>.tar.gz  Choose the RPC-agent file appropriate to your Thing or development machine.",
            "title": "Download the core Iot component"
        },
        {
            "location": "/getting-started/#setup-your-environment-worldpay-within",
            "text": "You'll need to drop the core IoT component (RPC-agent file) into the appropriate place in the SDK (or wrapper directory).  Follow the instructions for each supported language on where to place the core IoT component (RPC-agent file) and what to call it. The instructions will also let you know if there are any other pre-requisites to install on your device before you get started.  Java  .NET  Go  Go  Node.js  Python (2.7)",
            "title": "Setup your environment Worldpay Within"
        },
        {
            "location": "/the-flows/",
            "text": "There are certain flows that are allowable for the consumer and producer, and this flow should be adhered to when utilising the Worldpay Within SDK. What follows is a diagram of the flow, and then a detailed breakdown of the steps of the flows, what they do; and explicitly the order in which they should be followed.\n\n\nThe devices are not synchronised by the SDK in any way - so it is up to the developer of the app that sits on top of the SDK to call the Worldpay Within API in the correct order. This is the responsibility of the developer. However if the order below is adhered to then the outcome of the functionality will be as desired.\n\n\nThe Flows diagram\n\u00b6\n\n\n\n\nThe flows of the producer and consumer\n\n\n\nThe Consumer flow\n\u00b6\n\n\n\n\nNote\n\n\nThis is the flow of the consumer, please note that these flow steps map to the interface either in Go or in the Wrapper - e.g. in Java this is fully documented in the javadoc.\n\n\n\n\n\n\n\n\n\n\nStep in Flow\n\n\nWhat it does\n\n\n\n\n\n\n\n\n\n\n1. SETUP\n\n\nSetups up the device\n\n\n\n\n\n\n2. DEVICE DISCOVERY\n\n\nDiscover devices that are broadcasting messages\n\n\n\n\n\n\n3. (CHOOSE MESSAGE)\n\n\nChoose the message, then use that information in the following steps\n\n\n\n\n\n\n4. INIT CONSUMER\n\n\nInitialises the device as a consumer\n\n\n\n\n\n\n5. REQUEST SERVICES\n\n\nRequest service messages from the device that is broadcasting, which lists what services it's offering\n\n\n\n\n\n\n6. GET SERVICE PRICES\n\n\nGet's the prices for the service you are interested in\n\n\n\n\n\n\n7. SELECT SERVICE\n\n\nSelects the service the device wants to consume\n\n\n\n\n\n\n8. MAKE PAYMENT\n\n\nMakes a payment for the service that is chosen\n\n\n\n\n\n\n9. BEGIN SERVICE DELIVERY\n\n\nStarts the process / flow to consume the service based on the service token received\n\n\n\n\n\n\n10. STOP SERVICE DELIVERY\n\n\nCalled to tell the other thing that it has completed it's consumption of the service\n\n\n\n\n\n\n\n\nThe Producer flow\n\u00b6\n\n\n\n\nNote\n\n\nThis is the flow of the producer, please note that these flow steps map to the interface either in Go or in the Wrapper - e.g. in Java this is fully documented in the javadoc.\n\n\n\n\n\n\n\n\n\n\nStep in Flow\n\n\nWhat it does\n\n\n\n\n\n\n\n\n\n\n1. SETUP\n\n\nSetups the device\n\n\n\n\n\n\n2A. ADD SERVICE\n\n\nAdds a service to the producer\n\n\n\n\n\n\n2B. REMOVE SERVICE\n\n\nRemvoves a service from the producer\n\n\n\n\n\n\n3. INIT PRODUCER\n\n\nInitialises the producer\n\n\n\n\n\n\n4A. START BROADCAST\n\n\nStarts the producer broadcasting it's service message\n\n\n\n\n\n\n4B. STOP BROADCAST\n\n\nStops the producer from broadcasting it's service message\n\n\n\n\n\n\n\n\nAPI calls\n\u00b6\n\n\nThe steps in the flow neatly map to the api flows, here is some further information about what they do:\n\n\n\n\n\n\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsetup\n\n\nSets up the wrapper to be able to start communicating with the underlying SDK\n\n\n\n\n\n\naddService\n\n\nAdds a service of type WWSerive to the producer, used if the device you are operating on is a producer, if added to a device you intend as a consumer this will give that device producer functionality\n\n\n\n\n\n\nremoveService\n\n\nThis removes the service from the producer\n\n\n\n\n\n\ninitConsumer\n\n\nThis initiates the device as a consumer, which enables it to find services, negotiate prices, make payments and receive services\n\n\n\n\n\n\ninitProducer\n\n\nThis initiates the device as a producer / or initialises the devices producer capability\n\n\n\n\n\n\ngetDevice\n\n\nThis is able to provide back details of the the current device that the SDK is running on, and it credentials / information\n\n\n\n\n\n\nstartServiceBroadcast\n\n\nThis enables the producer device to start broadcasting itself via UDP broadcast over the network to notifiy devices it is available to be consumed\n\n\n\n\n\n\nstopServiceBroadcast\n\n\nThis method stops the SDK from broadcasting the current service messages that it is broadcasting\n\n\n\n\n\n\ndeviceDiscovery\n\n\nThis enables the consumer device to discovery other devices (producers) on the network that are UDP broadcasting\n\n\n\n\n\n\nrequestServices\n\n\nGet a list of services that are avaialble from the broadcasting device\n\n\n\n\n\n\ngetServicePrices\n\n\nThis is used by the consumer to get the list of prices associated with a particular serviceId\n\n\n\n\n\n\nselectService\n\n\nSelection of a service is performed by the consumer, providing details of the service, the amount and at what price point it wants to purchase the service\n\n\n\n\n\n\nmakePayment\n\n\nThis allows the consumer to request a payment be made at the producer device, by providing the total price response object as the request. The producer will then make the payment (or attempt to) and send back a Payment Response detailing whether it was successful or not\n\n\n\n\n\n\nbeginServiceDelivery\n\n\nThis begins the service delivery, and is requested by the consumer, and will proceed as long as the correct information is provided to the producer. If the correct credentials are passed through, then the producer will start releasing the service known as a 'trusted trigger'\n\n\n\n\n\n\nendServiceDelivery\n\n\nThis ends the service delivery, a request initiated by the consumer",
            "title": "The Flows"
        },
        {
            "location": "/the-flows/#the-flows-diagram",
            "text": "The flows of the producer and consumer",
            "title": "The Flows diagram"
        },
        {
            "location": "/the-flows/#the-consumer-flow",
            "text": "Note  This is the flow of the consumer, please note that these flow steps map to the interface either in Go or in the Wrapper - e.g. in Java this is fully documented in the javadoc.      Step in Flow  What it does      1. SETUP  Setups up the device    2. DEVICE DISCOVERY  Discover devices that are broadcasting messages    3. (CHOOSE MESSAGE)  Choose the message, then use that information in the following steps    4. INIT CONSUMER  Initialises the device as a consumer    5. REQUEST SERVICES  Request service messages from the device that is broadcasting, which lists what services it's offering    6. GET SERVICE PRICES  Get's the prices for the service you are interested in    7. SELECT SERVICE  Selects the service the device wants to consume    8. MAKE PAYMENT  Makes a payment for the service that is chosen    9. BEGIN SERVICE DELIVERY  Starts the process / flow to consume the service based on the service token received    10. STOP SERVICE DELIVERY  Called to tell the other thing that it has completed it's consumption of the service",
            "title": "The Consumer flow"
        },
        {
            "location": "/the-flows/#the-producer-flow",
            "text": "Note  This is the flow of the producer, please note that these flow steps map to the interface either in Go or in the Wrapper - e.g. in Java this is fully documented in the javadoc.      Step in Flow  What it does      1. SETUP  Setups the device    2A. ADD SERVICE  Adds a service to the producer    2B. REMOVE SERVICE  Remvoves a service from the producer    3. INIT PRODUCER  Initialises the producer    4A. START BROADCAST  Starts the producer broadcasting it's service message    4B. STOP BROADCAST  Stops the producer from broadcasting it's service message",
            "title": "The Producer flow"
        },
        {
            "location": "/the-flows/#api-calls",
            "text": "The steps in the flow neatly map to the api flows, here is some further information about what they do:     Method  Description      setup  Sets up the wrapper to be able to start communicating with the underlying SDK    addService  Adds a service of type WWSerive to the producer, used if the device you are operating on is a producer, if added to a device you intend as a consumer this will give that device producer functionality    removeService  This removes the service from the producer    initConsumer  This initiates the device as a consumer, which enables it to find services, negotiate prices, make payments and receive services    initProducer  This initiates the device as a producer / or initialises the devices producer capability    getDevice  This is able to provide back details of the the current device that the SDK is running on, and it credentials / information    startServiceBroadcast  This enables the producer device to start broadcasting itself via UDP broadcast over the network to notifiy devices it is available to be consumed    stopServiceBroadcast  This method stops the SDK from broadcasting the current service messages that it is broadcasting    deviceDiscovery  This enables the consumer device to discovery other devices (producers) on the network that are UDP broadcasting    requestServices  Get a list of services that are avaialble from the broadcasting device    getServicePrices  This is used by the consumer to get the list of prices associated with a particular serviceId    selectService  Selection of a service is performed by the consumer, providing details of the service, the amount and at what price point it wants to purchase the service    makePayment  This allows the consumer to request a payment be made at the producer device, by providing the total price response object as the request. The producer will then make the payment (or attempt to) and send back a Payment Response detailing whether it was successful or not    beginServiceDelivery  This begins the service delivery, and is requested by the consumer, and will proceed as long as the correct information is provided to the producer. If the correct credentials are passed through, then the producer will start releasing the service known as a 'trusted trigger'    endServiceDelivery  This ends the service delivery, a request initiated by the consumer",
            "title": "API calls"
        },
        {
            "location": "/architecture/",
            "text": "Quick intro\n\u00b6\n\n\nTo complement the Architecture we have released the Worldpay Within SDK. The intention for of the SDK is to encapsulate implementation and therefore assist third party vendors and developers in integration into their IoT solutions.\n\n\nThe core of the SDK is developed in the Go programming language with wrappers created for Java, Node.JS, Python 2.7, Pyhton 3.0 and .net(C#). Service delivery and broadcast have been implemented using TCP/IP networking.\n\n\nPlease note the low level service messaging json spec can be found here\n\n\nArchitecture Overview\n\u00b6\n\n\nIn the IoT, each Thing will perform the function it is designed for be it acting as a sensor, or a controller or both. In order for Thing to be able to make and receive payments for services they can provide to other Things, they need to add the payments functionality contained in Worldpay Within.\n\n\n\n\nFigure 1. Worldpay Within Pluggable agent.\n\n\nThings in the IoT will be implemented on dedicated low cost processor systems. The Thing and Worldpay Within must co-exist and operate on the resources provided by these devices, as demonstrated in Figure 2.\n\n\n\n\nFigure 2. Worldpay Within Logical Overview.\n\n\nIn order to make and receive payments in the IoT, a Thing must be able to perform the roles of \u201cconsumer\u201d, to make a payment for services, and the \u201cmerchant\u201d, to receive a payment for provision of services. In the Worldpay Within IoT architecture, the \u201cconsumer\u201d pays for services by supporting Host Card Emulation (HCE). The \u201cmerchant\u201d receives payments for services by supporting Host Terminal Emulation (HTE). Worldpay Within contains both an HCE Brain & HTE Brain functionalities, ensuring a Thing can both consume and supply services. These services are provided through a series of public APIs, described within this document.\n\n\nHCE and HTE require the secure storage and use of the credentials during the payments process. This necessitates the use of secure processing within the Thing in a \u201cSecure Execution Environment\u201d.\n\n\nFor HCE Things, these credentials include the details of the \u201ccard\u201d which the payment will be made from. For HTE Things, these credentials include the details the Merchant requires to perform transactions in Online.worldpay.com.\n\n\nAs well as the provision of the payment for the services, Worldpay Within provides for the generation and validation of secure service tokens, which allow for services to be consumed in part or together, but separately from the payments functionality.\n\n\nWorldpay Within IoT Service Architeture\n\u00b6\n\n\nThe provision of a service within the Worldpay IoT system is performed in 4 phases, as shown in Figure 4, these being: Service Discovery; Service Negotiation; Payment; and Service Delivery. Each of these phases are described in the following sections.\n\n\n\n\nFigure 4. The 4 phases of Worldpay Within.\n\n\nService Discovery\n\u00b6\n\n\nEach Thing that offers services, the service \u2018supplier\u2019 shall broadcast it\u2019s list of available services, as shown in Figure 4 below. When a potential \u2018consumer\u2019 of the service connects with \u2018supplier\u2019 it can request details of the services offered.\n\n\nProviding a suitable service is discovered, the consumer then requests the service from the supplier, and price negotiations can begin.\n\n\n\n\nFigure 5. IoT Service discovery.\n\n\nService Discovery APIs\n\u00b6\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nbroadcast\n\n\nserver_UUID\n\n\nAdvertising services and identifying the sender\n\n\n\n\n\n\nrequest services\n\n\nnone\n\n\nRequest a list of all services\n\n\n\n\n\n\nservices_response\n\n\nlist of services, server_UUID\n\n\nProvide client with a list of possible services that the sender can provide\n\n\n\n\n\n\n\n\nService discovery messages\n\u00b6\n\n\nA broadcast message that includes Thing B\u2019s UUID is sent.\n\n\nUpon receiving the message Thing A connects to Thing B and requests the list of available services.\n\n\nThing B responds with a list identifying the services available.\n\n\nService Negotiation\n\u00b6\n\n\nOnce a suitable service has been discovered, there will be a price negotiation. The provider may offer the same service at different rates depending on the number of units of service to be purchased. The process is outlined in Figure 5. The outcome of the process is an agreement to purchase an amount of service and a total price for the service to be provided. The service provider can then request payment for the agreed service and price.\n\n\n\n\nFigure 6. IoT Service Negotiation.\n\n\nService Negotiation APIs\n\u00b6\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nprice_request\n\n\nservice_id\n\n\nRequest a list of all prices for a given service.\n\n\n\n\n\n\nprice_response\n\n\nserver_UUID, list of prices, (service_id, price_id, price_per_unit, unit_ID, unit_description, price_description)\n\n\nProvide the client with a list of prices for a given service. A price object contains the per unit price.\n\n\n\n\n\n\nprice_select\n\n\nservice_id, price_id, number_of_units, client_UUID\n\n\nSelect a price with price_id, for service_id for a number of units.\n\n\n\n\n\n\nprice_select_response\n\n\nprice_id, number_of_units, total_price, server_UUID, client_UUID, payment_ref_ID, Merchant_Client_key\n\n\nCommunicate the expected total price to the client.\n\n\n\n\n\n\n\n\nService negotiation messages\n\u00b6\n\n\nA price request is sent containing the selected service_id.\n\n\nThe response from Thing B contains a list of price items; each item should contain a price_id, per unit price, unit_ID and description fields of both the unit and the price.\n\n\nThing A then selects an appropriate price_id by sending a request with its client_UUID, the selected service_id, the price_id, and the number of items required.\n\n\nIf the number of items falls within the correct number of items for the price selected, then Thing B responds with a price select response containing the service_id, price_id, the total price, the service_UUID and a reference for the payment and its Merchant Client key. Otherwise Thing B shall return the number of units it can supply along with the correct price, and additional details required to initiate the payment.\n\n\nPayment\n\u00b6\n\n\nThe payment process with Online.worldpay.com is a two stage process, split between the consumer and merchant Things involved in the transaction, these stages are:\n\n\n\n\nClient Token Request, and\n\n\nPayment Authorisation Request. (Also known as Order Request)\n\n\n\n\nDuring the first stage, the consumer sends Online.worldpay.com their payment credentials and the merchants Client Key. Online.worldpay.com returns a Client Token, which the consumer passes to the Merchant, allowing the merchant to perform the payment authorisation request with Online.worldpay.com by providing the Client Token and transaction details.\n\n\nThis payment process ensures that the consumer does not pass their payment credentials to the merchant, only to Online.worldpay.com.\n\n\nClient token request\n\u00b6\n\n\nThe first step in the payment process is when Thing A receives the Merchant_Client_Key from Thing B. Thing B passes their public Client Key to Thing A as part of the price_select_response during the Service Negotiation phase. Upon receiving the Client Key from Thing B, Thing A connects with Online.worldpay.com to request the client token from Online.worldpay.com. This request includes Thing A\u2019s payment credentials: Card PAN, expiry, and the client_key of Thing B. Online.worldpay.com will respond with a message that includes a client_token. This is shown in Figure 7.\n\n\n\n\nFigure 7. IoT Payment process - client token request.\n\n\nClient token request APIs\n\u00b6\n\n\nThing A to Online.worldpay.com client token request\n\u00b6\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nclient_token_request\n\n\nPayment_method, reusable_flag, Merchant_client_key Payment_method (name, PAN, expiryMonth, expiryYear, type)\n\n\nRequest a client token from Online.worldpay.com, whilst providing Online.worldpay.com with the payment credentials.\n\n\n\n\n\n\nclient_token_response\n\n\nclient_token, reusable_flag, payment_method_response (type, name, expiryMonth, expiryYear, card_type, card_scheme_type, card_scheme_name, masked_card_number, card_product_type_description_non_contactless, card_product_type_description_contactless, card_issuer, country_code, card_class, pre-paid)\n\n\nResponse from Online.worldpay.com containing the client_token.\n\n\n\n\n\n\nPayment_request\n\n\nclient_token, client_UUID, payment_ref_ID\n\n\nThe client_token is passed to Thing B to allow the 2\nnd\n part of the transaction process to take place.\n\n\n\n\n\n\n\n\nThing A will connect to Online.worldpay.com using TLS. It will then request a client_token by securely (see 2.2.1) sending a JSON message containing the paymentMethod, its payment credentials (PAN, expiry) to Online.worldpay.com along with the client_ key from Thing B. In addition a flag indicating if the client details can be used in future is sent, for IoT this should always be set \u2018reusable\u2019:\u2019false\u2019 in order to force generation of a new client token for each transaction.\n\n\nA successful response will be an HTTP POST response containing fields: client_token, reusable_flag and the payment_method_response. Once received, the client_token shall be passed to Thing B\n\n\nA sample request is shown in Appendix B: Sample Service Messaging.\n\n\nSee Online.worldpay.com documentation for client_token_request & client_token_repsonse APIs data descriptions.\n\n\nPayment authorisation request\n\u00b6\n\n\nThing B will process the order and request the payment from Online.worldpay.com providing its Service key, client_token, transaction currency and payment amount. This is transmitted to Online.worldpay.com over TLS. After successful processing Online.worldpay.com will provide a payment response. Thing B shall then generate a service token, which Thing A may use in future to obtain the services that the payment has been made for. This is shown in Figure 7.\n\n\n\n\nFigure 8. Payment Authorisation Request.\n\n\nPayment authorisation request APIs\n\u00b6\n\n\nThing B to Online.worldpay.com payment authorisation request\n\u00b6\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\norder_request\n\n\nclient_service_key, client_token, currency_code, amount, order_description, customer_order_code\n\n\nRequest payment from Online.worldpay.com.\n\n\n\n\n\n\norder_response\n\n\norder_code, client_token, order_description, amount, currency_code, payment_status, customer_order_code, environment, risk_score, payment_response (type, name, expiryMonth, expiryYear, card_type, card_scheme_type, card_scheme_name, masked_card_number, card_product_type_description_non_contactless, card_product_type_description_contactless, card_issuer, country_code, card_class, pre-paid)\n\n\nPayment response indicating a successful transaction on the Online.worldpay.com platform.\n\n\n\n\n\n\n\n\nThing B shall assemble a message to be posted to Online.worldpay.com that contains the client token, Service key, the amount, currency and transaction description. Online.worldpay.com shall then perform an authorisation using the payment credentials identified by the client_token. A successful authorisation will result in a payment_status of SUCCESS being returned to Thing B.\n\n\nThing B to Thing A service token\n\u00b6\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\npayment_request_response\n\n\nservice_delivery_token, server_UUID, client_UUID, total_paid\n\n\nservice_delivery_token is passed to ThingB.\n\n\n\n\n\n\n\n\nThing B shall then generate a cryptographically secure service_delivery_token, which can be used by Thing A to request provision of services from Thing B.\n\n\nService Delivery\n\u00b6\n\n\nOnce the payment has been made, Thing B shall return to broadcasting its available services. Thing A will now be able to consume the service from Thing B by providing the service_delivery_token. The service delivery may be in a single step, or over time. An overview of service delivery is shown in Figure 8.\n\n\n\n\nFigure 8. Service delivery.\n\n\nOnce in possession of a service_token, Thing A may then request the service be provided. The service could be consumed in one session, or in several sessions over time, depending on the nature of the service and number of units purchased. Thing A may repeatedly send service delivery requests until Thing B indicates that the service has been delivered.\n\n\nService Delivery APIs\n\u00b6\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\npayment_request_response\n\n\nservice_delivery_token, server_UUID, client_UUID, total_paid\n\n\nservice_delivery_token is passed to ThingB.\n\n\n\n\n\n\nbroadcast\n\n\nserver_UUID\n\n\nAdvertising services and identifying the sender.\n\n\n\n\n\n\ndelivery_begin_request\n\n\nservice_delivery_token, client_UUID, number_of_units_to_supply\n\n\nRequest the service item, with the service_delivery_token providing right to receive the service, and amount of service to be supplied.\n\n\n\n\n\n\ndelivery_begin_response\n\n\nserver_UUID, service_delivery_token, client_UUID, number_of_units_to_be_supplied\n\n\nResponse for the service delivery. Confirmation of number of service units to be supplied (Allowing for less units than requested).\n\n\n\n\n\n\ndelivery_end\n\n\nclient_UUID, number_of_units_received\n\n\nConfirmation of service received.\n\n\n\n\n\n\ndelivery_end_response\n\n\nserver_UUID, service_delivery_token, client_UUID, number_of_units_just_supplied, number_of_units_remaining\n\n\nService end indicating outstanding service credits and token for subsequent delivery.\n\n\n\n\n\n\n\n\nThing A sends a message with the service_delivery_token to Thing B, along with the amount of service it wishes to consume. The response shall confirm the amount of service units that Thing B can supply to Thing A at that time. Once the service has been delivered, Thing A shall confirm the amount of service units it has received, with Thing B responding, stating the number of units still remaining to Thing A, if any.\n\n\nUseful terms\n\u00b6\n\n\nA few useful terms we're making quite a lot of use of, and if you are new to the world of payments these may be unfamiliar to you!\n\n\n\n\n\n\n\n\nTerm\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nAPI\n\n\nApplication Programming Interface\n\n\n\n\n\n\nOnline.worldpay.com\n\n\nWorldpay Open Payment API, \nhttps://online.worldpay.com/\n\n\n\n\n\n\nHCE\n\n\nHost Card Emulation\n\n\n\n\n\n\nHTE\n\n\nHost Terminal Emulation\n\n\n\n\n\n\nHTTPS\n\n\nHyperText Transfer Protocol Secure\n\n\n\n\n\n\nIoT\n\n\nInternet of Things\n\n\n\n\n\n\nP2PE\n\n\nPoint to Point Encryption\n\n\n\n\n\n\nTLS\n\n\nTransport Layer Security\n\n\n\n\n\n\nUUID\n\n\nUniversally Unique Identifier\n\n\n\n\n\n\nRPC\n\n\nRemote Procedure Call",
            "title": "Architecture"
        },
        {
            "location": "/architecture/#quick-intro",
            "text": "To complement the Architecture we have released the Worldpay Within SDK. The intention for of the SDK is to encapsulate implementation and therefore assist third party vendors and developers in integration into their IoT solutions.  The core of the SDK is developed in the Go programming language with wrappers created for Java, Node.JS, Python 2.7, Pyhton 3.0 and .net(C#). Service delivery and broadcast have been implemented using TCP/IP networking.  Please note the low level service messaging json spec can be found here",
            "title": "Quick intro"
        },
        {
            "location": "/architecture/#architecture-overview",
            "text": "In the IoT, each Thing will perform the function it is designed for be it acting as a sensor, or a controller or both. In order for Thing to be able to make and receive payments for services they can provide to other Things, they need to add the payments functionality contained in Worldpay Within.   Figure 1. Worldpay Within Pluggable agent.  Things in the IoT will be implemented on dedicated low cost processor systems. The Thing and Worldpay Within must co-exist and operate on the resources provided by these devices, as demonstrated in Figure 2.   Figure 2. Worldpay Within Logical Overview.  In order to make and receive payments in the IoT, a Thing must be able to perform the roles of \u201cconsumer\u201d, to make a payment for services, and the \u201cmerchant\u201d, to receive a payment for provision of services. In the Worldpay Within IoT architecture, the \u201cconsumer\u201d pays for services by supporting Host Card Emulation (HCE). The \u201cmerchant\u201d receives payments for services by supporting Host Terminal Emulation (HTE). Worldpay Within contains both an HCE Brain & HTE Brain functionalities, ensuring a Thing can both consume and supply services. These services are provided through a series of public APIs, described within this document.  HCE and HTE require the secure storage and use of the credentials during the payments process. This necessitates the use of secure processing within the Thing in a \u201cSecure Execution Environment\u201d.  For HCE Things, these credentials include the details of the \u201ccard\u201d which the payment will be made from. For HTE Things, these credentials include the details the Merchant requires to perform transactions in Online.worldpay.com.  As well as the provision of the payment for the services, Worldpay Within provides for the generation and validation of secure service tokens, which allow for services to be consumed in part or together, but separately from the payments functionality.",
            "title": "Architecture Overview"
        },
        {
            "location": "/architecture/#worldpay-within-iot-service-architeture",
            "text": "The provision of a service within the Worldpay IoT system is performed in 4 phases, as shown in Figure 4, these being: Service Discovery; Service Negotiation; Payment; and Service Delivery. Each of these phases are described in the following sections.   Figure 4. The 4 phases of Worldpay Within.",
            "title": "Worldpay Within IoT Service Architeture"
        },
        {
            "location": "/architecture/#service-discovery",
            "text": "Each Thing that offers services, the service \u2018supplier\u2019 shall broadcast it\u2019s list of available services, as shown in Figure 4 below. When a potential \u2018consumer\u2019 of the service connects with \u2018supplier\u2019 it can request details of the services offered.  Providing a suitable service is discovered, the consumer then requests the service from the supplier, and price negotiations can begin.   Figure 5. IoT Service discovery.",
            "title": "Service Discovery"
        },
        {
            "location": "/architecture/#service-discovery-apis",
            "text": "Key  Parameters  Purpose      broadcast  server_UUID  Advertising services and identifying the sender    request services  none  Request a list of all services    services_response  list of services, server_UUID  Provide client with a list of possible services that the sender can provide",
            "title": "Service Discovery APIs"
        },
        {
            "location": "/architecture/#service-discovery-messages",
            "text": "A broadcast message that includes Thing B\u2019s UUID is sent.  Upon receiving the message Thing A connects to Thing B and requests the list of available services.  Thing B responds with a list identifying the services available.",
            "title": "Service discovery messages"
        },
        {
            "location": "/architecture/#service-negotiation",
            "text": "Once a suitable service has been discovered, there will be a price negotiation. The provider may offer the same service at different rates depending on the number of units of service to be purchased. The process is outlined in Figure 5. The outcome of the process is an agreement to purchase an amount of service and a total price for the service to be provided. The service provider can then request payment for the agreed service and price.   Figure 6. IoT Service Negotiation.",
            "title": "Service Negotiation"
        },
        {
            "location": "/architecture/#service-negotiation-apis",
            "text": "Key  Parameters  Purpose      price_request  service_id  Request a list of all prices for a given service.    price_response  server_UUID, list of prices, (service_id, price_id, price_per_unit, unit_ID, unit_description, price_description)  Provide the client with a list of prices for a given service. A price object contains the per unit price.    price_select  service_id, price_id, number_of_units, client_UUID  Select a price with price_id, for service_id for a number of units.    price_select_response  price_id, number_of_units, total_price, server_UUID, client_UUID, payment_ref_ID, Merchant_Client_key  Communicate the expected total price to the client.",
            "title": "Service Negotiation APIs"
        },
        {
            "location": "/architecture/#service-negotiation-messages",
            "text": "A price request is sent containing the selected service_id.  The response from Thing B contains a list of price items; each item should contain a price_id, per unit price, unit_ID and description fields of both the unit and the price.  Thing A then selects an appropriate price_id by sending a request with its client_UUID, the selected service_id, the price_id, and the number of items required.  If the number of items falls within the correct number of items for the price selected, then Thing B responds with a price select response containing the service_id, price_id, the total price, the service_UUID and a reference for the payment and its Merchant Client key. Otherwise Thing B shall return the number of units it can supply along with the correct price, and additional details required to initiate the payment.",
            "title": "Service negotiation messages"
        },
        {
            "location": "/architecture/#payment",
            "text": "The payment process with Online.worldpay.com is a two stage process, split between the consumer and merchant Things involved in the transaction, these stages are:   Client Token Request, and  Payment Authorisation Request. (Also known as Order Request)   During the first stage, the consumer sends Online.worldpay.com their payment credentials and the merchants Client Key. Online.worldpay.com returns a Client Token, which the consumer passes to the Merchant, allowing the merchant to perform the payment authorisation request with Online.worldpay.com by providing the Client Token and transaction details.  This payment process ensures that the consumer does not pass their payment credentials to the merchant, only to Online.worldpay.com.",
            "title": "Payment"
        },
        {
            "location": "/architecture/#client-token-request",
            "text": "The first step in the payment process is when Thing A receives the Merchant_Client_Key from Thing B. Thing B passes their public Client Key to Thing A as part of the price_select_response during the Service Negotiation phase. Upon receiving the Client Key from Thing B, Thing A connects with Online.worldpay.com to request the client token from Online.worldpay.com. This request includes Thing A\u2019s payment credentials: Card PAN, expiry, and the client_key of Thing B. Online.worldpay.com will respond with a message that includes a client_token. This is shown in Figure 7.   Figure 7. IoT Payment process - client token request.",
            "title": "Client token request"
        },
        {
            "location": "/architecture/#client-token-request-apis",
            "text": "",
            "title": "Client token request APIs"
        },
        {
            "location": "/architecture/#thing-a-to-onlineworldpaycom-client-token-request",
            "text": "Key  Parameters  Purpose      client_token_request  Payment_method, reusable_flag, Merchant_client_key Payment_method (name, PAN, expiryMonth, expiryYear, type)  Request a client token from Online.worldpay.com, whilst providing Online.worldpay.com with the payment credentials.    client_token_response  client_token, reusable_flag, payment_method_response (type, name, expiryMonth, expiryYear, card_type, card_scheme_type, card_scheme_name, masked_card_number, card_product_type_description_non_contactless, card_product_type_description_contactless, card_issuer, country_code, card_class, pre-paid)  Response from Online.worldpay.com containing the client_token.    Payment_request  client_token, client_UUID, payment_ref_ID  The client_token is passed to Thing B to allow the 2 nd  part of the transaction process to take place.     Thing A will connect to Online.worldpay.com using TLS. It will then request a client_token by securely (see 2.2.1) sending a JSON message containing the paymentMethod, its payment credentials (PAN, expiry) to Online.worldpay.com along with the client_ key from Thing B. In addition a flag indicating if the client details can be used in future is sent, for IoT this should always be set \u2018reusable\u2019:\u2019false\u2019 in order to force generation of a new client token for each transaction.  A successful response will be an HTTP POST response containing fields: client_token, reusable_flag and the payment_method_response. Once received, the client_token shall be passed to Thing B  A sample request is shown in Appendix B: Sample Service Messaging.  See Online.worldpay.com documentation for client_token_request & client_token_repsonse APIs data descriptions.",
            "title": "Thing A to Online.worldpay.com client token request"
        },
        {
            "location": "/architecture/#payment-authorisation-request",
            "text": "Thing B will process the order and request the payment from Online.worldpay.com providing its Service key, client_token, transaction currency and payment amount. This is transmitted to Online.worldpay.com over TLS. After successful processing Online.worldpay.com will provide a payment response. Thing B shall then generate a service token, which Thing A may use in future to obtain the services that the payment has been made for. This is shown in Figure 7.   Figure 8. Payment Authorisation Request.",
            "title": "Payment authorisation request"
        },
        {
            "location": "/architecture/#payment-authorisation-request-apis",
            "text": "",
            "title": "Payment authorisation request APIs"
        },
        {
            "location": "/architecture/#thing-b-to-onlineworldpaycom-payment-authorisation-request",
            "text": "Key  Parameters  Purpose      order_request  client_service_key, client_token, currency_code, amount, order_description, customer_order_code  Request payment from Online.worldpay.com.    order_response  order_code, client_token, order_description, amount, currency_code, payment_status, customer_order_code, environment, risk_score, payment_response (type, name, expiryMonth, expiryYear, card_type, card_scheme_type, card_scheme_name, masked_card_number, card_product_type_description_non_contactless, card_product_type_description_contactless, card_issuer, country_code, card_class, pre-paid)  Payment response indicating a successful transaction on the Online.worldpay.com platform.     Thing B shall assemble a message to be posted to Online.worldpay.com that contains the client token, Service key, the amount, currency and transaction description. Online.worldpay.com shall then perform an authorisation using the payment credentials identified by the client_token. A successful authorisation will result in a payment_status of SUCCESS being returned to Thing B.",
            "title": "Thing B to Online.worldpay.com payment authorisation request"
        },
        {
            "location": "/architecture/#thing-b-to-thing-a-service-token",
            "text": "Key  Parameters  Purpose      payment_request_response  service_delivery_token, server_UUID, client_UUID, total_paid  service_delivery_token is passed to ThingB.     Thing B shall then generate a cryptographically secure service_delivery_token, which can be used by Thing A to request provision of services from Thing B.",
            "title": "Thing B to Thing A service token"
        },
        {
            "location": "/architecture/#service-delivery",
            "text": "Once the payment has been made, Thing B shall return to broadcasting its available services. Thing A will now be able to consume the service from Thing B by providing the service_delivery_token. The service delivery may be in a single step, or over time. An overview of service delivery is shown in Figure 8.   Figure 8. Service delivery.  Once in possession of a service_token, Thing A may then request the service be provided. The service could be consumed in one session, or in several sessions over time, depending on the nature of the service and number of units purchased. Thing A may repeatedly send service delivery requests until Thing B indicates that the service has been delivered.",
            "title": "Service Delivery"
        },
        {
            "location": "/architecture/#service-delivery-apis",
            "text": "Key  Parameters  Purpose      payment_request_response  service_delivery_token, server_UUID, client_UUID, total_paid  service_delivery_token is passed to ThingB.    broadcast  server_UUID  Advertising services and identifying the sender.    delivery_begin_request  service_delivery_token, client_UUID, number_of_units_to_supply  Request the service item, with the service_delivery_token providing right to receive the service, and amount of service to be supplied.    delivery_begin_response  server_UUID, service_delivery_token, client_UUID, number_of_units_to_be_supplied  Response for the service delivery. Confirmation of number of service units to be supplied (Allowing for less units than requested).    delivery_end  client_UUID, number_of_units_received  Confirmation of service received.    delivery_end_response  server_UUID, service_delivery_token, client_UUID, number_of_units_just_supplied, number_of_units_remaining  Service end indicating outstanding service credits and token for subsequent delivery.     Thing A sends a message with the service_delivery_token to Thing B, along with the amount of service it wishes to consume. The response shall confirm the amount of service units that Thing B can supply to Thing A at that time. Once the service has been delivered, Thing A shall confirm the amount of service units it has received, with Thing B responding, stating the number of units still remaining to Thing A, if any.",
            "title": "Service Delivery APIs"
        },
        {
            "location": "/architecture/#useful-terms",
            "text": "A few useful terms we're making quite a lot of use of, and if you are new to the world of payments these may be unfamiliar to you!     Term  Definition      API  Application Programming Interface    Online.worldpay.com  Worldpay Open Payment API,  https://online.worldpay.com/    HCE  Host Card Emulation    HTE  Host Terminal Emulation    HTTPS  HyperText Transfer Protocol Secure    IoT  Internet of Things    P2PE  Point to Point Encryption    TLS  Transport Layer Security    UUID  Universally Unique Identifier    RPC  Remote Procedure Call",
            "title": "Useful terms"
        },
        {
            "location": "/atdc/",
            "text": "Setting up your Pi for Worldpay Within @ ATDC hackathon\n\u00b6\n\n\nQuick start\n\u00b6\n\n\n\n\nGet a pre-provisioned SD card, which should put you on the 'Connectify' network\n\n\nThe go, and RPi Python wrapper should be ready to go, the RPC agent is available for you to provision the other wrappers too. Speak to Conor or Kevin for help with this\n\n\n\n\nHow to see my transactions on Worldpay total?\n\u00b6\n\n\nDon't get this confused with the global/european system, for this hackathon you can view the transactions through the virtual terminal here: \nterminal.demo.securenet.com\n - login credentials from Clint\n\n\nAndroid wrapper ?\n\u00b6\n\n\nWe have not developed an Android wrapper, however there is one in development on the 'native-interface' branch, which allows you to call into the RPC-agent/SDC by going directly without need for RPC. This partially works, and is not certified, and is on older code, but you are free to experiment with this.\n\n\nProbably better is to use a 'proxy' Pi as your consumer, and expose each step / feature as a simple RESTful api, which the Android can call to orchestrate the flow, the business logic can then all be included in the Android app, with the Worldpay Within SDK running on the Pi. Please discuss with Conor for any more help on this topic\n\n\nSelf provision the Raspberry Pi\n\u00b6\n\n\n\n\nGet the Pi to the provisioning team so they can get it on the Connectify network, or choose Connectify with password: wpt1c123\n\n\nYou should now be able to do the rest yourself, by ssh-ing to the device at \nssh pi@wppi##\n e.g. for the Pi number 40: \nssh pi@wppi40\n\n\nChange to the directory with the Worldpay Within SDK in it: \n~/go/src/github.com/wptechinnovation/worldpay-within-sdk/\n\n\nChange to the develop branch \ngit checkout develop\n\n\nPull the latest code \ngit pull\n\n\nGet the latest RPC-agent for Raspberry pi \nwget http://bit.ly/wpwlinarm32\n\n\n\n\nHow to setup the python 2.7 wrapper\n\u00b6\n\n\n\n\nIf you want to use the 2.7 python wrapper, then download apache thrift 0.10.0 (latest version)\n\n\nExtract it and change to the \nlib/py/\n directory\n\n\nRun the following command \nsudo python setup.py install\n\n\nPlace the RPC-agent in the python wrapper directory: \n~/go/src/github.com/wptechinnovation/worldpay-within-sdk/wrappers/python_2-7\n\n\nRename to \nrpc-agent\n, run \nsudo chmod ugo+x rpc-agent\n\n\nTest run it with \n./rpc-agent -port 9018\n, then close it using ctrl-C and make sure it is killed using \nps -e | grep rpc-agent\n and if it's still running do a \nKill <process-id>\n\n\nYou're now ready to provision your device with your securenet credentials, and the run the example apps\n\n\n\n\nMore info about the python 2.7 wrapper\n\n\nHow to setup the other wrappers\n\u00b6\n\n\nIf you want to use the Java, Node.js, Python 3 or .Net wrappers then here is further information about the setup:\n\n\n\n\nJava wrapper - talk to Conor or Kevin, you'll need to setup a project with the source and pull in the libs\n\n\nNode.js\n - or talk to Conor\n\n\nPython 3 - talk to Kevin (HINT: once you've got this wrapper, theres a self contained setup.py)\n\n\n.net wrapper\n - or talk to Conor or Kevin\n\n\n\n\nEnvironment variables for accessing RPC-agent\n\u00b6\n\n\nNote that with various support on the wrappers (2.7 python does not yet support), you can use an evironment variable for finding your rpc-agent\n\n\nSet the environmental variable \nWPW_HOME\n which is the path to the WPWithin Home. Binaries should go in the $WPW_HOME/bin directory.\n\n\nFor the node.js and Java wrappers, first check if $WPW_HOME is set. If so the wrappers launch the approriately named rpc-agent from $WPW_HOME/bin/. If not then look for the RPC agent in the ./rpc-agent-bin/ directory. E.g. for Mac OS (go with it that it's called amd64...):\n\n\n\n\n$WPW_HOME/bin/rpc-agent-darwin-amd64\n\n\n./rpc-agent-bin/rpc-agent-darwin-amd64\n\n\n\n\nDeploying the Java wrapper to the Pi\n\u00b6\n\n\n\n\nAssuming you have the consumer or producer app setup in your favourite IDE\n\n\nDo a clean build of the consumer app to generate a dist directory\n\n\nCreate a \ndistribtopi\n directory\n\n\nCopy the contents of \ndist\n into the \ndistribtopi\n\n\nIn this directory create a subdirectory called \nrpc-agent-bin\n\n\nFrom the latest release, get the Raspberry pi rpc-agent \nrpc-agent-linux-arm32\n\n\nZip up this package and put onto your Pi however you prefer\n\n\nUnzip on the Pi\n\n\nRun the program with \njava -jar <Name-of-your-app>.jar\n\n\nAny issues you can't debug, come and have a chat with Kevin or Conor we're happy to help\n\n\n\n\nSupport\n\u00b6\n\n\nAny issues with setting up Worldpay Within (and the wrappers) on your Rasbperry Pi or Development machine please reach out to Conor Hackett or Kevin Gordon, who will be able to support you over this weekend. They've familiar with a few gotchas, and will be able to get you up and running in no time!\n\n\nAlso you can join us on slack here: \nhttps://wpwithin-slack-in.herokuapp.com",
            "title": "The Atlanta Fintech Hackathon"
        },
        {
            "location": "/atdc/#setting-up-your-pi-for-worldpay-within-atdc-hackathon",
            "text": "",
            "title": "Setting up your Pi for Worldpay Within @ ATDC hackathon"
        },
        {
            "location": "/atdc/#quick-start",
            "text": "Get a pre-provisioned SD card, which should put you on the 'Connectify' network  The go, and RPi Python wrapper should be ready to go, the RPC agent is available for you to provision the other wrappers too. Speak to Conor or Kevin for help with this",
            "title": "Quick start"
        },
        {
            "location": "/atdc/#how-to-see-my-transactions-on-worldpay-total",
            "text": "Don't get this confused with the global/european system, for this hackathon you can view the transactions through the virtual terminal here:  terminal.demo.securenet.com  - login credentials from Clint",
            "title": "How to see my transactions on Worldpay total?"
        },
        {
            "location": "/atdc/#android-wrapper",
            "text": "We have not developed an Android wrapper, however there is one in development on the 'native-interface' branch, which allows you to call into the RPC-agent/SDC by going directly without need for RPC. This partially works, and is not certified, and is on older code, but you are free to experiment with this.  Probably better is to use a 'proxy' Pi as your consumer, and expose each step / feature as a simple RESTful api, which the Android can call to orchestrate the flow, the business logic can then all be included in the Android app, with the Worldpay Within SDK running on the Pi. Please discuss with Conor for any more help on this topic",
            "title": "Android wrapper ?"
        },
        {
            "location": "/atdc/#self-provision-the-raspberry-pi",
            "text": "Get the Pi to the provisioning team so they can get it on the Connectify network, or choose Connectify with password: wpt1c123  You should now be able to do the rest yourself, by ssh-ing to the device at  ssh pi@wppi##  e.g. for the Pi number 40:  ssh pi@wppi40  Change to the directory with the Worldpay Within SDK in it:  ~/go/src/github.com/wptechinnovation/worldpay-within-sdk/  Change to the develop branch  git checkout develop  Pull the latest code  git pull  Get the latest RPC-agent for Raspberry pi  wget http://bit.ly/wpwlinarm32",
            "title": "Self provision the Raspberry Pi"
        },
        {
            "location": "/atdc/#how-to-setup-the-python-27-wrapper",
            "text": "If you want to use the 2.7 python wrapper, then download apache thrift 0.10.0 (latest version)  Extract it and change to the  lib/py/  directory  Run the following command  sudo python setup.py install  Place the RPC-agent in the python wrapper directory:  ~/go/src/github.com/wptechinnovation/worldpay-within-sdk/wrappers/python_2-7  Rename to  rpc-agent , run  sudo chmod ugo+x rpc-agent  Test run it with  ./rpc-agent -port 9018 , then close it using ctrl-C and make sure it is killed using  ps -e | grep rpc-agent  and if it's still running do a  Kill <process-id>  You're now ready to provision your device with your securenet credentials, and the run the example apps   More info about the python 2.7 wrapper",
            "title": "How to setup the python 2.7 wrapper"
        },
        {
            "location": "/atdc/#how-to-setup-the-other-wrappers",
            "text": "If you want to use the Java, Node.js, Python 3 or .Net wrappers then here is further information about the setup:   Java wrapper - talk to Conor or Kevin, you'll need to setup a project with the source and pull in the libs  Node.js  - or talk to Conor  Python 3 - talk to Kevin (HINT: once you've got this wrapper, theres a self contained setup.py)  .net wrapper  - or talk to Conor or Kevin",
            "title": "How to setup the other wrappers"
        },
        {
            "location": "/atdc/#environment-variables-for-accessing-rpc-agent",
            "text": "Note that with various support on the wrappers (2.7 python does not yet support), you can use an evironment variable for finding your rpc-agent  Set the environmental variable  WPW_HOME  which is the path to the WPWithin Home. Binaries should go in the $WPW_HOME/bin directory.  For the node.js and Java wrappers, first check if $WPW_HOME is set. If so the wrappers launch the approriately named rpc-agent from $WPW_HOME/bin/. If not then look for the RPC agent in the ./rpc-agent-bin/ directory. E.g. for Mac OS (go with it that it's called amd64...):   $WPW_HOME/bin/rpc-agent-darwin-amd64  ./rpc-agent-bin/rpc-agent-darwin-amd64",
            "title": "Environment variables for accessing RPC-agent"
        },
        {
            "location": "/atdc/#deploying-the-java-wrapper-to-the-pi",
            "text": "Assuming you have the consumer or producer app setup in your favourite IDE  Do a clean build of the consumer app to generate a dist directory  Create a  distribtopi  directory  Copy the contents of  dist  into the  distribtopi  In this directory create a subdirectory called  rpc-agent-bin  From the latest release, get the Raspberry pi rpc-agent  rpc-agent-linux-arm32  Zip up this package and put onto your Pi however you prefer  Unzip on the Pi  Run the program with  java -jar <Name-of-your-app>.jar  Any issues you can't debug, come and have a chat with Kevin or Conor we're happy to help",
            "title": "Deploying the Java wrapper to the Pi"
        },
        {
            "location": "/atdc/#support",
            "text": "Any issues with setting up Worldpay Within (and the wrappers) on your Rasbperry Pi or Development machine please reach out to Conor Hackett or Kevin Gordon, who will be able to support you over this weekend. They've familiar with a few gotchas, and will be able to get you up and running in no time!  Also you can join us on slack here:  https://wpwithin-slack-in.herokuapp.com",
            "title": "Support"
        },
        {
            "location": "/documentation/",
            "text": "Theme Documentation\n\u00b6\n\n\nBlockquotes\n\u00b6\n\n\n\n\nMorbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum.\n  Pellentesque aliquet quam enim, eu volutpat urna rutrum a.\n\n\n\n\nLists\n\u00b6\n\n\nUnordered lists\n\u00b6\n\n\n\n\nSed sagittis eleifend rutrum.\n\n\nDuis mollis est eget nibh volutpat, fermentum aliquet dui mollis.\n\n\n\n\n\n\nAliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex.\n\n\nNulla et rhoncus turpis. \n\n\n\n\nOrdered lists\n\u00b6\n\n\n\n\n\n\nInteger vehicula feugiat magna, a mollis tellus. \n\n\n\n\n\n\nCum sociis natoque penatibus et magnis dis parturient montes, nascetur\n  ridiculus mus.\n\n\n\n\n\n\nVivamus venenatis porttitor tortor sit amet rutrum. \n\n\n\n\n\n\nMorbi eget dapibus felis. \n\n\n\n\n\n\nPellentesque eget \nvar\n \n_extends\n ornare tellus, ut gravida mi.\n\n\n\n\n\n\n\n\n\n\nVivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis.\n\n\n\n\n\n\nDefinition lists\n\u00b6\n\n\n\n\nLorem ipsum dolor sit amet\n\n\n\n\nSed sagittis eleifend rutrum. Donec vitae suscipit est.\n\n\n\n\nCras arcu libero\n\n\n\n\nAliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin\nut eros sed sapien ullamcorper consequat. \n\n\n\n\n\n\nCode blocks\n\u00b6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nvar\n \n_extends\n \n=\n \nfunction\n(\ntarget\n)\n \n{\n\n  \nfor\n \n(\nvar\n \ni\n \n=\n \n1\n;\n \ni\n \n<\n \narguments\n.\nlength\n;\n \ni\n++\n)\n \n{\n\n    \nvar\n \nsource\n \n=\n \narguments\n[\ni\n];\n\n    \nfor\n \n(\nvar\n \nkey\n \nin\n \nsource\n)\n \n{\n\n      \ntarget\n[\nkey\n]\n \n=\n \nsource\n[\nkey\n];\n\n    \n}\n\n  \n}\n\n\n  \nreturn\n \ntarget\n;\n\n\n};\n\n\n\n\n\n\n\nHorizontal line\n\u00b6\n\n\n\n\nData tables\n\u00b6\n\n\n\n\n\n\n\n\nSollicitudo / Pellentesi\n\n\nconsectetur\n\n\nadipiscing\n\n\n\n\n\n\n\n\n\n\nVivamus a pharetra\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nOrnare viverra ex\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nMauris a ullamcorper\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nNullam urna elit\n\n\nyes\n\n\nyes\n\n\n\n\n\n\nMalesuada eget finibus\n\n\nyes\n\n\nyes\n\n\n\n\n\n\n\n\nNotes\n\u00b6\n\n\n\n\nNote\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nPhasellus posuere in sem ut cursus\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nNote\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\nSELECT\n\n  \nEmployees\n.\nEmployeeID\n,\n\n  \nEmployees\n.\nName\n,\n\n  \nEmployees\n.\nSalary\n,\n\n  \nManager\n.\nName\n \nAS\n \nManager\n\n\nFROM\n\n  \nEmployees\n\n\n\n\n\nNunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in\nsem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis.\nEtiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.\n\n\n\n\n\n\nSummary\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nTip\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nSuccess\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nWarning\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nFailure\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nDanger\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nBug\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\n\n\nQuote\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nCode Block\n\u00b6\n\n\nimport\n \ntensorflow\n \nas\n \ntf\n\n\n\n\n\n#!/usr/bin/python\n\n\nimport\n \ntensorflow\n \nas\n \ntf\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n\"\"\" Bubble sort \"\"\"\n\n\ndef\n \nbubble_sort\n(\nitems\n):\n\n    \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\nitems\n)):\n\n        \nfor\n \nj\n \nin\n \nrange\n(\nlen\n(\nitems\n)\n \n-\n \n1\n \n-\n \ni\n):\n\n            \nif\n \nitems\n[\nj\n]\n \n>\n \nitems\n[\nj\n \n+\n \n1\n]:\n\n                \nitems\n[\nj\n],\n \nitems\n[\nj\n \n+\n \n1\n]\n \n=\n \nitems\n[\nj\n \n+\n \n1\n],\n \nitems\n[\nj\n]\n\n\n\n#!python hl_lines=\"3 4\"\n\n\n\"\"\" Bubble sort \"\"\"\n\n\ndef\n \nbubble_sort\n(\nitems\n):\n\n    \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\nitems\n)):\n\n        \nfor\n \nj\n \nin\n \nrange\n(\nlen\n(\nitems\n)\n \n-\n \n1\n \n-\n \ni\n):\n\n            \nif\n \nitems\n[\nj\n]\n \n>\n \nitems\n[\nj\n \n+\n \n1\n]:\n\n                \nitems\n[\nj\n],\n \nitems\n[\nj\n \n+\n \n1\n]\n \n=\n \nitems\n[\nj\n \n+\n \n1\n],\n \nitems\n[\nj\n]\n\n\n\n\n\n\n\nFootnotes\n\u00b6\n\n\nLorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2]\n\n\nJump to footnote at the bottom of the page\n\n\nMetadata\n\u00b6\n\n\nThe \nMetadata\n extension makes it possible to add metadata to a document\nwhich gives more control over the theme in a page-specific context.\n\n\nExample:\n\n\ntitle: Lorem ipsum dolor sit amet\ndescription: Nullam urna elit, malesuada eget finibus ut, ac tortor.\npath: path/to/file\nsource: file.js\n\n## Permalinks\n\nPermalinks are a feature of the [Table of Contents][1] extension, which is part\nof the standard Markdown library. The extension inserts an anchor at the end of\neach headline, which makes it possible to directly link to a subpart of the\ndocument.\n\n  [1]: https://pythonhosted.org/Markdown/extensions/toc.html\n\n## Installation\n\nTo enable permalinks, add the following to your `mkdocs.yml`:\n\n``` yaml\nmarkdown_extensions:\n  - toc(permalink=true)\n\n\n\n\nThis will add a link containing the paragraph symbol \n\u00b6\n at the end of each\nheadline (exactly like on the page you're currently viewing), which the\nMaterial theme will make appear on hover. In order to change the text of the\npermalink, a string can be passed, e.g.:\n\n\nmarkdown_extensions:\n  - toc(permalink=Link)\n\n\n\n\nPyMdown Extensions\n\u00b6\n\n\nPyMdown Extensions\n is a collection of Markdown extensions that add some\ngreat features to the standard Markdown library. For this reason, the\n\ninstallation of this package is highly recommended\n as it's well-integrated\nwith the Material theme.\n\n\nInstallation\n\u00b6\n\n\nThe PyMdown Extensions package can be installed with the following command:\n\n\npip install pymdown-extensions\n\n\n\n\nThe following list of extensions that are part of the PyMdown Extensions\npackage are recommended to be used together with the Material theme:\n\n\nmarkdown_extensions\n:\n\n  \n-\n \npymdownx.arithmatex\n\n  \n-\n \npymdownx.betterem(smart_enable=all)\n\n  \n-\n \npymdownx.caret\n\n  \n-\n \npymdownx.critic\n\n  \n-\n \npymdownx.emoji\n:\n\n      \nemoji_generator\n:\n \n!!python/name:pymdownx.emoji.to_svg\n\n  \n-\n \npymdownx.inlinehilite\n\n  \n-\n \npymdownx.magiclink\n\n  \n-\n \npymdownx.mark\n\n  \n-\n \npymdownx.smartsymbols\n\n  \n-\n \npymdownx.superfences\n\n  \n-\n \npymdownx.tasklist(custom_checkbox=true)\n\n  \n-\n \npymdownx.tilde\n\n\n\n\n\nUsage\n\u00b6\n\n\nGitHub Flavored Markdown\n\u00b6\n\n\nMost of the extensions included in the PyMdown Extensions package try to bring\nthe Markdown experience closer to GitHub Flavored Markdown (GFM).\n\n\nThe PyMdown Extensions package adds a shorthand to enable all of the included\nextensions that provide the GFM experience. However, usage of the shorthand is\ndiscouraged, because some extensions are not supported, as the Material theme\nuses some incompatible extensions included in the standard Markdown library.\n\n\nBetterEm\n\u00b6\n\n\nBetterEm\n improves the handling of emphasis markup (\nbold\n and \nitalic\n)\nwithin Markdown by providing a more sophisticated parser for better detecting\nstart and end tokens. Read the documentation for \nusage notes\n.\n\n\nEmoji\n\u00b6\n\n\nEmoji\n adds the ability to insert a \n-load of emojis that we use in\nour daily lives. See the \nEmojiOne demo\n for a list of all available\nemojis. Happy scrolling \n\n\n\n\nLegal disclaimer\n\n\nMaterial has no affiliation with \nEmojiOne\n which is released under\n\nCC BY 4.0\n. When including EmojiOne images or CSS, please read the\n\nEmojiOne license\n to ensure proper usage and attribution.\n\n\n\n\nMagicLink\n\u00b6\n\n\nMagicLink\n detects links in Markdown and auto-generates the necessary\nmarkup, so no special syntax is required. It auto-links \nhttp[s]://\n and\n\nftp://\n links, as well as references to email addresses:\n\n\nSuperFences\n\u00b6\n\n\nSuperFences\n provides the ability to nest code blocks under blockquotes,\nlists and other block elements, which the \nFenced Code Blocks\n extension\nfrom the standard Markdown library doesn't parse correctly.\n\n\nTasklist\n\u00b6\n\n\nTasklist\n adds support for styled checkbox lists. This is useful for\nkeeping track of tasks and showing what has been done and has yet to be done.\nCheckbox lists are like regular lists, but prefixed with \n[ ]\n for empty or\n\n[x]\n for filled checkboxes.\n\n\nExample:\n\n\n* [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n* [x] Nulla lobortis egestas semper\n* [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est\n* [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis\n    * [ ] Praesent sed risus massa\n* [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n* [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi\n\n\n\n\nResult:\n\n\n\n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit\n\n\n Nulla lobortis egestas semper\n\n\n Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est\n\n\n Vestibulum convallis sit amet nisi a tincidunt\n\n\n In hac habitasse platea dictumst\n\n\n In scelerisque nibh non dolor mollis congue sed et metus\n\n\n Sed egestas felis quis elit dapibus, ac aliquet turpis mattis\n\n\n Praesent sed risus massa\n\n\n\n\n\n\n Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n\n\n Nulla vel eros venenatis, imperdiet enim id, faucibus nisi\n\n\n\n\nTilde\n\u00b6\n\n\nTilde\n provides an easy way to \nstrike through\n cross out\u00a0text.\nThe portion of text that should be erased must be enclosed in two tildes\n\n~~...~~\n and the extension will take care of the rest.\n\n\nMore syntactic sugar\n\u00b6\n\n\nCaret\n\u00b6\n\n\nCaret\n is the sister extension of \nTilde\n and makes it possible to\nhighlight \ninserted text\n. The portion of text that should be marked as added\nmust be enclosed in two carets \n^^...^^\n.\n\n\nMark\n\u00b6\n\n\nMark\n adds the ability to \nhighlight text\n like it was marked with a\n\nyellow text marker\n. The portion of text that should be highlighted must be\nenclosed in two equal signs \n==...==\n.\n\n\nSmartSymbols\n\u00b6\n\n\nSmartSymbols\n converts markup for special characters into their\ncorresponding symbols, e.g. arrows (\u2190, \u2192, \u2194), trademark and copyright\nsymbols (\u00a9, \u2122, \u00ae) and fractions (\u00bd, \u00bc, ...).\n\n\nCritic\n\u00b6\n\n\nCritic\n implements \nCritic Markup\n, a Markdown extension that enables\nthe tracking of changes (additions, deletions and comments) on documents.\nDuring compilation of the Markdown document, changes can be rendered (default),\naccepted or rejected.\n\n\nText can be \ndeleted\n and replacement text \nadded\n. This can also be\ncombined into \none\na single\n operation. \nHighlighting\n is also\npossible \nand comments can be added inline\n.\n\n\n\n\nFormatting can also be applied to blocks, by putting the opening and closing\ntags on separate lines and adding new lines between the tags and the content.",
            "title": "Documentation"
        },
        {
            "location": "/documentation/#theme-documentation",
            "text": "",
            "title": "Theme Documentation"
        },
        {
            "location": "/documentation/#blockquotes",
            "text": "Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum.\n  Pellentesque aliquet quam enim, eu volutpat urna rutrum a.",
            "title": "Blockquotes"
        },
        {
            "location": "/documentation/#lists",
            "text": "",
            "title": "Lists"
        },
        {
            "location": "/documentation/#unordered-lists",
            "text": "Sed sagittis eleifend rutrum.  Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.    Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex.  Nulla et rhoncus turpis.",
            "title": "Unordered lists"
        },
        {
            "location": "/documentation/#ordered-lists",
            "text": "Integer vehicula feugiat magna, a mollis tellus.     Cum sociis natoque penatibus et magnis dis parturient montes, nascetur\n  ridiculus mus.    Vivamus venenatis porttitor tortor sit amet rutrum.     Morbi eget dapibus felis.     Pellentesque eget  var   _extends  ornare tellus, ut gravida mi.      Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis.",
            "title": "Ordered lists"
        },
        {
            "location": "/documentation/#definition-lists",
            "text": "Lorem ipsum dolor sit amet   Sed sagittis eleifend rutrum. Donec vitae suscipit est.   Cras arcu libero   Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin\nut eros sed sapien ullamcorper consequat.",
            "title": "Definition lists"
        },
        {
            "location": "/documentation/#code-blocks",
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 var   _extends   =   function ( target )   { \n   for   ( var   i   =   1 ;   i   <   arguments . length ;   i ++ )   { \n     var   source   =   arguments [ i ]; \n     for   ( var   key   in   source )   { \n       target [ key ]   =   source [ key ]; \n     } \n   }     return   target ;  };",
            "title": "Code blocks"
        },
        {
            "location": "/documentation/#horizontal-line",
            "text": "",
            "title": "Horizontal line"
        },
        {
            "location": "/documentation/#data-tables",
            "text": "Sollicitudo / Pellentesi  consectetur  adipiscing      Vivamus a pharetra  yes  yes    Ornare viverra ex  yes  yes    Mauris a ullamcorper  yes  yes    Nullam urna elit  yes  yes    Malesuada eget finibus  yes  yes",
            "title": "Data tables"
        },
        {
            "location": "/documentation/#notes",
            "text": "Note  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Phasellus posuere in sem ut cursus  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Note  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.  SELECT \n   Employees . EmployeeID , \n   Employees . Name , \n   Employees . Salary , \n   Manager . Name   AS   Manager  FROM \n   Employees   Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in\nsem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis.\nEtiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.    Summary  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Tip  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Success  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Warning  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Failure  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Danger  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Bug  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.    Quote  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.",
            "title": "Notes"
        },
        {
            "location": "/documentation/#code-block",
            "text": "import   tensorflow   as   tf   #!/usr/bin/python  import   tensorflow   as   tf    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 \"\"\" Bubble sort \"\"\"  def   bubble_sort ( items ): \n     for   i   in   range ( len ( items )): \n         for   j   in   range ( len ( items )   -   1   -   i ): \n             if   items [ j ]   >   items [ j   +   1 ]: \n                 items [ j ],   items [ j   +   1 ]   =   items [ j   +   1 ],   items [ j ]  #!python hl_lines=\"3 4\"  \"\"\" Bubble sort \"\"\"  def   bubble_sort ( items ): \n     for   i   in   range ( len ( items )): \n         for   j   in   range ( len ( items )   -   1   -   i ): \n             if   items [ j ]   >   items [ j   +   1 ]: \n                 items [ j ],   items [ j   +   1 ]   =   items [ j   +   1 ],   items [ j ]",
            "title": "Code Block"
        },
        {
            "location": "/documentation/#footnotes",
            "text": "Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2]  Jump to footnote at the bottom of the page",
            "title": "Footnotes"
        },
        {
            "location": "/documentation/#metadata",
            "text": "The  Metadata  extension makes it possible to add metadata to a document\nwhich gives more control over the theme in a page-specific context.  Example:  title: Lorem ipsum dolor sit amet\ndescription: Nullam urna elit, malesuada eget finibus ut, ac tortor.\npath: path/to/file\nsource: file.js\n\n## Permalinks\n\nPermalinks are a feature of the [Table of Contents][1] extension, which is part\nof the standard Markdown library. The extension inserts an anchor at the end of\neach headline, which makes it possible to directly link to a subpart of the\ndocument.\n\n  [1]: https://pythonhosted.org/Markdown/extensions/toc.html\n\n## Installation\n\nTo enable permalinks, add the following to your `mkdocs.yml`:\n\n``` yaml\nmarkdown_extensions:\n  - toc(permalink=true)  This will add a link containing the paragraph symbol  \u00b6  at the end of each\nheadline (exactly like on the page you're currently viewing), which the\nMaterial theme will make appear on hover. In order to change the text of the\npermalink, a string can be passed, e.g.:  markdown_extensions:\n  - toc(permalink=Link)",
            "title": "Metadata"
        },
        {
            "location": "/documentation/#pymdown-extensions",
            "text": "PyMdown Extensions  is a collection of Markdown extensions that add some\ngreat features to the standard Markdown library. For this reason, the installation of this package is highly recommended  as it's well-integrated\nwith the Material theme.",
            "title": "PyMdown Extensions"
        },
        {
            "location": "/documentation/#installation",
            "text": "The PyMdown Extensions package can be installed with the following command:  pip install pymdown-extensions  The following list of extensions that are part of the PyMdown Extensions\npackage are recommended to be used together with the Material theme:  markdown_extensions : \n   -   pymdownx.arithmatex \n   -   pymdownx.betterem(smart_enable=all) \n   -   pymdownx.caret \n   -   pymdownx.critic \n   -   pymdownx.emoji : \n       emoji_generator :   !!python/name:pymdownx.emoji.to_svg \n   -   pymdownx.inlinehilite \n   -   pymdownx.magiclink \n   -   pymdownx.mark \n   -   pymdownx.smartsymbols \n   -   pymdownx.superfences \n   -   pymdownx.tasklist(custom_checkbox=true) \n   -   pymdownx.tilde",
            "title": "Installation"
        },
        {
            "location": "/documentation/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/documentation/#github-flavored-markdown",
            "text": "Most of the extensions included in the PyMdown Extensions package try to bring\nthe Markdown experience closer to GitHub Flavored Markdown (GFM).  The PyMdown Extensions package adds a shorthand to enable all of the included\nextensions that provide the GFM experience. However, usage of the shorthand is\ndiscouraged, because some extensions are not supported, as the Material theme\nuses some incompatible extensions included in the standard Markdown library.",
            "title": "GitHub Flavored Markdown"
        },
        {
            "location": "/documentation/#betterem",
            "text": "BetterEm  improves the handling of emphasis markup ( bold  and  italic )\nwithin Markdown by providing a more sophisticated parser for better detecting\nstart and end tokens. Read the documentation for  usage notes .",
            "title": "BetterEm"
        },
        {
            "location": "/documentation/#emoji",
            "text": "Emoji  adds the ability to insert a  -load of emojis that we use in\nour daily lives. See the  EmojiOne demo  for a list of all available\nemojis. Happy scrolling    Legal disclaimer  Material has no affiliation with  EmojiOne  which is released under CC BY 4.0 . When including EmojiOne images or CSS, please read the EmojiOne license  to ensure proper usage and attribution.",
            "title": "Emoji"
        },
        {
            "location": "/documentation/#magiclink",
            "text": "MagicLink  detects links in Markdown and auto-generates the necessary\nmarkup, so no special syntax is required. It auto-links  http[s]://  and ftp://  links, as well as references to email addresses:",
            "title": "MagicLink"
        },
        {
            "location": "/documentation/#superfences",
            "text": "SuperFences  provides the ability to nest code blocks under blockquotes,\nlists and other block elements, which the  Fenced Code Blocks  extension\nfrom the standard Markdown library doesn't parse correctly.",
            "title": "SuperFences"
        },
        {
            "location": "/documentation/#tasklist",
            "text": "Tasklist  adds support for styled checkbox lists. This is useful for\nkeeping track of tasks and showing what has been done and has yet to be done.\nCheckbox lists are like regular lists, but prefixed with  [ ]  for empty or [x]  for filled checkboxes.  Example:  * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n* [x] Nulla lobortis egestas semper\n* [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est\n* [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis\n    * [ ] Praesent sed risus massa\n* [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n* [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi  Result:    Lorem ipsum dolor sit amet, consectetur adipiscing elit   Nulla lobortis egestas semper   Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est   Vestibulum convallis sit amet nisi a tincidunt   In hac habitasse platea dictumst   In scelerisque nibh non dolor mollis congue sed et metus   Sed egestas felis quis elit dapibus, ac aliquet turpis mattis   Praesent sed risus massa     Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque   Nulla vel eros venenatis, imperdiet enim id, faucibus nisi",
            "title": "Tasklist"
        },
        {
            "location": "/documentation/#tilde",
            "text": "Tilde  provides an easy way to  strike through  cross out\u00a0text.\nThe portion of text that should be erased must be enclosed in two tildes ~~...~~  and the extension will take care of the rest.",
            "title": "Tilde"
        },
        {
            "location": "/documentation/#more-syntactic-sugar",
            "text": "",
            "title": "More syntactic sugar"
        },
        {
            "location": "/documentation/#caret",
            "text": "Caret  is the sister extension of  Tilde  and makes it possible to\nhighlight  inserted text . The portion of text that should be marked as added\nmust be enclosed in two carets  ^^...^^ .",
            "title": "Caret"
        },
        {
            "location": "/documentation/#mark",
            "text": "Mark  adds the ability to  highlight text  like it was marked with a yellow text marker . The portion of text that should be highlighted must be\nenclosed in two equal signs  ==...== .",
            "title": "Mark"
        },
        {
            "location": "/documentation/#smartsymbols",
            "text": "SmartSymbols  converts markup for special characters into their\ncorresponding symbols, e.g. arrows (\u2190, \u2192, \u2194), trademark and copyright\nsymbols (\u00a9, \u2122, \u00ae) and fractions (\u00bd, \u00bc, ...).",
            "title": "SmartSymbols"
        },
        {
            "location": "/documentation/#critic",
            "text": "Critic  implements  Critic Markup , a Markdown extension that enables\nthe tracking of changes (additions, deletions and comments) on documents.\nDuring compilation of the Markdown document, changes can be rendered (default),\naccepted or rejected.  Text can be  deleted  and replacement text  added . This can also be\ncombined into  one a single  operation.  Highlighting  is also\npossible  and comments can be added inline .   Formatting can also be applied to blocks, by putting the opening and closing\ntags on separate lines and adding new lines between the tags and the content.",
            "title": "Critic"
        }
    ]
}